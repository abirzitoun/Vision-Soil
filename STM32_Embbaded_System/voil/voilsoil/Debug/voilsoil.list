
voilsoil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005e58  08005e58  00006e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005efc  08005efc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000580  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005dc  200005dc  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001302b  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5d  00000000  00000000  0001a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0001cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfb  00000000  00000000  0001dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023478  00000000  00000000  0001eacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016812  00000000  00000000  00041f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daba2  00000000  00000000  00058755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001332f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  0013333c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e40 	.word	0x08005e40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005e40 	.word	0x08005e40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <uartx_write>:
#include "uart.h"
#include "stdio.h"
#include "string.h"

void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 800057c:	1cf9      	adds	r1, r7, #3
 800057e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000582:	2201      	movs	r2, #1
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f004 fbeb 	bl	8004d60 <HAL_UART_Transmit>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, uint8_t *info)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 800059c:	e007      	b.n	80005ae <uartx_write_text+0x1c>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	603a      	str	r2, [r7, #0]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffe1 	bl	8000570 <uartx_write>
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f3      	bne.n	800059e <uartx_write_text+0xc>

}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <BH1750_init>:
#include "BH1750.h"
extern I2C_HandleTypeDef hi2c1;
uint8_t BH1750_dato[2];

void BH1750_init()
{       delay_us_dwt_init();
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	f000 f822 	bl	800060c <delay_us_dwt_init>
        delay_ms(50);//20 ms por datasheet
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f000 f85d 	bl	8000688 <Delay_ms>
        BH1750_write(power_down);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f802 	bl	80005d8 <BH1750_write>
}                  
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <BH1750_write>:

void BH1750_write(uint8_t dato)
{ BH1750_dato[0]=dato;
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <BH1750_write+0x2c>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	7013      	strb	r3, [r2, #0]
	 HAL_I2C_Master_Transmit(&hi2c1, BH1750_address_w  ,BH1750_dato, 1, 300);
 80005e8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <BH1750_write+0x2c>)
 80005f2:	2146      	movs	r1, #70	@ 0x46
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <BH1750_write+0x30>)
 80005f6:	f002 ff3b 	bl	8003470 <HAL_I2C_Master_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000078 	.word	0x20000078
 8000608:	200001d0 	.word	0x200001d0

0800060c <delay_us_dwt_init>:


#if __CORTEX_M !=0

void delay_us_dwt_init()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <delay_us_dwt_init+0x34>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <delay_us_dwt_init+0x34>)
 8000616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800061a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800061c:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <delay_us_dwt_init+0x38>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <delay_us_dwt_init+0x38>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]
    pasos=( HAL_RCC_GetHCLKFreq()/1000000);//le el cristal pasa a us
 8000628:	f003 fea0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800062c:	4603      	mov	r3, r0
 800062e:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <delay_us_dwt_init+0x3c>)
 8000630:	fba2 2303 	umull	r2, r3, r2, r3
 8000634:	0c9b      	lsrs	r3, r3, #18
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <delay_us_dwt_init+0x40>)
 8000638:	6013      	str	r3, [r2, #0]

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000edf0 	.word	0xe000edf0
 8000644:	e0001000 	.word	0xe0001000
 8000648:	431bde83 	.word	0x431bde83
 800064c:	2000007c 	.word	0x2000007c

08000650 <delay_us_dwt>:

//retardo por debbuger
void delay_us_dwt(uint32_t reta)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

DWT->CYCCNT=0;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <delay_us_dwt+0x30>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
while( DWT->CYCCNT<=pasos*reta);//multiplica por us
 800065e:	bf00      	nop
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <delay_us_dwt+0x30>)
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <delay_us_dwt+0x34>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	fb01 f303 	mul.w	r3, r1, r3
 800066e:	429a      	cmp	r2, r3
 8000670:	d9f6      	bls.n	8000660 <delay_us_dwt+0x10>
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e0001000 	.word	0xe0001000
 8000684:	2000007c 	.word	0x2000007c

08000688 <Delay_ms>:
#endif

void Delay_ms(uint32_t ms)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint32_t us = ms * 1000;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	60fb      	str	r3, [r7, #12]
  Delay_us(us);  //el que fue definido
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ffd7 	bl	8000650 <delay_us_dwt>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
		uint8_t convCompleted;
		void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
			convCompleted=1 ;
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
		}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000484 	.word	0x20000484

080006cc <calculate_wind_speed>:
		float calculate_wind_speed(uint32_t adc_val) {
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
			// Handle special cases first
			if (adc_val == 0) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <calculate_wind_speed+0x14>
				return 0.0f;  // 0 ADC value means 0 wind speed
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	e02c      	b.n	800073a <calculate_wind_speed+0x6e>
			}

			// Convert ADC to voltage
			float voltage = adc_val * VOLTS_PER_ADC;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ea:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800074c <calculate_wind_speed+0x80>
 80006ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f2:	edc7 7a02 	vstr	s15, [r7, #8]



			float speed = (voltage) * WIND_SPEED_SLOPE;
 80006f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006fa:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000750 <calculate_wind_speed+0x84>
 80006fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000702:	edc7 7a03 	vstr	s15, [r7, #12]

			// If we're at max ADC value, return max wind speed
			if (adc_val >= MAX_ADC) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000710:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000754 <calculate_wind_speed+0x88>
 8000714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071c:	db01      	blt.n	8000722 <calculate_wind_speed+0x56>
				return MAX_WIND_SPEED;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <calculate_wind_speed+0x8c>)
 8000720:	e00b      	b.n	800073a <calculate_wind_speed+0x6e>
			}

			// Constrain to maximum value (in case voltage exceeds ANEMOMETER_MAX_V but not at MAX_ADC)
			if (speed > MAX_WIND_SPEED) {
 8000722:	edd7 7a03 	vldr	s15, [r7, #12]
 8000726:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800075c <calculate_wind_speed+0x90>
 800072a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000732:	dd01      	ble.n	8000738 <calculate_wind_speed+0x6c>
				speed = MAX_WIND_SPEED;
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <calculate_wind_speed+0x8c>)
 8000736:	60fb      	str	r3, [r7, #12]
			}

			return speed;
 8000738:	68fb      	ldr	r3, [r7, #12]
		}
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eeb0 0a67 	vmov.f32	s0, s15
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	3a534067 	.word	0x3a534067
 8000750:	41a20000 	.word	0x41a20000
 8000754:	457ff000 	.word	0x457ff000
 8000758:	4201999a 	.word	0x4201999a
 800075c:	4201999a 	.word	0x4201999a

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */



	HAL_Init();
 8000764:	f001 f950 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f830 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 fb94 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000770:	f000 fb6a 	bl	8000e48 <MX_DMA_Init>
  MX_ADC1_Init();
 8000774:	f000 f888 	bl	8000888 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000778:	f000 f954 	bl	8000a24 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800077c:	f000 fabc 	bl	8000cf8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000780:	f000 f9d0 	bl	8000b24 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000784:	f000 f8ee 	bl	8000964 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000788:	f000 fa1a 	bl	8000bc0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800078c:	f000 f978 	bl	8000a80 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000790:	f000 fa64 	bl	8000c5c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000794:	f000 fada 	bl	8000d4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000798:	f000 fb02 	bl	8000da0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800079c:	f000 fb2a 	bl	8000df4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
		  BH1750_init();
 80007a0:	f7ff ff0e 	bl	80005c0 <BH1750_init>
		  uartx_write_text(&huart1, "INICIANDO\r\n");
 80007a4:	4905      	ldr	r1, [pc, #20]	@ (80007bc <main+0x5c>)
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <main+0x60>)
 80007a8:	f7ff fef3 	bl	8000592 <uartx_write_text>
			HAL_TIM_Base_Start_IT(&htim2);
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <main+0x64>)
 80007ae:	f003 fe61 	bl	8004474 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <main+0x68>)
 80007b4:	f003 fe5e 	bl	8004474 <HAL_TIM_Base_Start_IT>
			//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawVal, 2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
			while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <main+0x58>
 80007bc:	08005e58 	.word	0x08005e58
 80007c0:	20000344 	.word	0x20000344
 80007c4:	2000026c 	.word	0x2000026c
 80007c8:	200002b4 	.word	0x200002b4

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	@ 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 feb0 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <SystemClock_Config+0xb4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a21      	ldr	r2, [pc, #132]	@ (8000880 <SystemClock_Config+0xb4>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <SystemClock_Config+0xb4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <SystemClock_Config+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1b      	ldr	r2, [pc, #108]	@ (8000884 <SystemClock_Config+0xb8>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <SystemClock_Config+0xb8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000830:	2310      	movs	r3, #16
 8000832:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f003 f971 	bl	8003b24 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000848:	f000 fd38 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fbd4 	bl	8004014 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000872:	f000 fd23 	bl	80012bc <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	@ 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <MX_ADC1_Init+0xd0>)
 800089c:	4a2f      	ldr	r2, [pc, #188]	@ (800095c <MX_ADC1_Init+0xd4>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008c8:	4a25      	ldr	r2, [pc, #148]	@ (8000960 <MX_ADC1_Init+0xd8>)
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80008d2:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008d4:	2203      	movs	r2, #3
 80008d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e6:	481c      	ldr	r0, [pc, #112]	@ (8000958 <MX_ADC1_Init+0xd0>)
 80008e8:	f001 f900 	bl	8001aec <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fce3 	bl	80012bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4814      	ldr	r0, [pc, #80]	@ (8000958 <MX_ADC1_Init+0xd0>)
 8000908:	f001 fb72 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000912:	f000 fcd3 	bl	80012bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000916:	2301      	movs	r3, #1
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <MX_ADC1_Init+0xd0>)
 8000924:	f001 fb64 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800092e:	f000 fcc5 	bl	80012bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000932:	2302      	movs	r3, #2
 8000934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000936:	2303      	movs	r3, #3
 8000938:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <MX_ADC1_Init+0xd0>)
 8000940:	f001 fb56 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800094a:	f000 fcb7 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000080 	.word	0x20000080
 800095c:	40012000 	.word	0x40012000
 8000960:	0f000001 	.word	0x0f000001

08000964 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000976:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 8000978:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <MX_ADC2_Init+0xb8>)
 800097a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 800098a:	2201      	movs	r2, #1
 800098c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 8000990:	2200      	movs	r2, #0
 8000992:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000994:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a20 <MX_ADC2_Init+0xbc>)
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009bc:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009be:	2201      	movs	r2, #1
 80009c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009c2:	4815      	ldr	r0, [pc, #84]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009c4:	f001 f892 	bl	8001aec <HAL_ADC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 fc75 	bl	80012bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 80009e4:	f001 fb04 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80009ee:	f000 fc65 	bl	80012bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_ADC2_Init+0xb4>)
 8000a00:	f001 faf6 	bl	8001ff0 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a0a:	f000 fc57 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000c8 	.word	0x200000c8
 8000a1c:	40012100 	.word	0x40012100
 8000a20:	0f000001 	.word	0x0f000001

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_I2C1_Init+0x50>)
 8000a62:	f002 fbc1 	bl	80031e8 <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fc26 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001d0 	.word	0x200001d0
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000a9e:	4a20      	ldr	r2, [pc, #128]	@ (8000b20 <MX_TIM1_Init+0xa0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7220;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000aa4:	f641 4234 	movw	r2, #7220	@ 0x1c34
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000ab2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aca:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000acc:	f003 fc82 	bl	80043d4 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ad6:	f000 fbf1 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000ae8:	f003 fe24 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000af2:	f000 fbe3 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <MX_TIM1_Init+0x9c>)
 8000b04:	f004 f84c 	bl	8004ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b0e:	f000 fbd5 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000224 	.word	0x20000224
 8000b20:	40010000 	.word	0x40010000

08000b24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b4a:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000b4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b58:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b6a:	4814      	ldr	r0, [pc, #80]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b6c:	f003 fc32 	bl	80043d4 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b76:	f000 fba1 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b88:	f003 fdd4 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b92:	f000 fb93 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000ba4:	f003 fffc 	bl	8004ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bae:	f000 fb85 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000026c 	.word	0x2000026c

08000bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000bde:	4a1e      	ldr	r2, [pc, #120]	@ (8000c58 <MX_TIM3_Init+0x98>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000be4:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000be8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000bf2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c04:	4813      	ldr	r0, [pc, #76]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000c06:	f003 fbe5 	bl	80043d4 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c10:	f000 fb54 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000c22:	f003 fd87 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 fb46 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_TIM3_Init+0x94>)
 8000c3e:	f003 ffaf 	bl	8004ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 fb38 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200002b4 	.word	0x200002b4
 8000c58:	40000400 	.word	0x40000400

08000c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <MX_TIM4_Init+0x98>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000c80:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000c84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000c8e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ca0:	4813      	ldr	r0, [pc, #76]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000ca2:	f003 fb97 	bl	80043d4 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cac:	f000 fb06 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000cbe:	f003 fd39 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000cc8:	f000 faf8 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_TIM4_Init+0x94>)
 8000cda:	f003 ff61 	bl	8004ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 faea 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200002fc 	.word	0x200002fc
 8000cf4:	40000800 	.word	0x40000800

08000cf8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <MX_USART1_UART_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_USART1_UART_Init+0x4c>)
 8000d30:	f003 ffc6 	bl	8004cc0 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f000 fabf 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000344 	.word	0x20000344
 8000d48:	40011000 	.word	0x40011000

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f003 ff9c 	bl	8004cc0 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 fa95 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000038c 	.word	0x2000038c
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <MX_USART3_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_USART3_UART_Init+0x4c>)
 8000dd8:	f003 ff72 	bl	8004cc0 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f000 fa6b 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200003d4 	.word	0x200003d4
 8000df0:	40004800 	.word	0x40004800

08000df4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <MX_USART6_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_USART6_UART_Init+0x4c>)
 8000e2c:	f003 ff48 	bl	8004cc0 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f000 fa41 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000041c 	.word	0x2000041c
 8000e44:	40011400 	.word	0x40011400

08000e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_DMA_Init+0x4c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <MX_DMA_Init+0x4c>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <MX_DMA_Init+0x4c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2038      	movs	r0, #56	@ 0x38
 8000e70:	f001 fc43 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e74:	2038      	movs	r0, #56	@ 0x38
 8000e76:	f001 fc5c 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	203a      	movs	r0, #58	@ 0x3a
 8000e80:	f001 fc3b 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e84:	203a      	movs	r0, #58	@ 0x3a
 8000e86:	f001 fc54 	bl	8002732 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b46      	ldr	r3, [pc, #280]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a45      	ldr	r2, [pc, #276]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a3e      	ldr	r2, [pc, #248]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b38      	ldr	r3, [pc, #224]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a37      	ldr	r2, [pc, #220]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b35      	ldr	r3, [pc, #212]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b31      	ldr	r3, [pc, #196]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a30      	ldr	r2, [pc, #192]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe8 <MX_GPIO_Init+0x150>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	482b      	ldr	r0, [pc, #172]	@ (8000fec <MX_GPIO_Init+0x154>)
 8000f40:	f002 f91e 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000f4a:	4829      	ldr	r0, [pc, #164]	@ (8000ff0 <MX_GPIO_Init+0x158>)
 8000f4c:	f002 f918 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f56:	4827      	ldr	r0, [pc, #156]	@ (8000ff4 <MX_GPIO_Init+0x15c>)
 8000f58:	f002 f912 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f62:	4825      	ldr	r0, [pc, #148]	@ (8000ff8 <MX_GPIO_Init+0x160>)
 8000f64:	f002 f90c 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481b      	ldr	r0, [pc, #108]	@ (8000fec <MX_GPIO_Init+0x154>)
 8000f80:	f001 ff62 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f84:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4814      	ldr	r0, [pc, #80]	@ (8000ff0 <MX_GPIO_Init+0x158>)
 8000f9e:	f001 ff53 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <MX_GPIO_Init+0x15c>)
 8000fbc:	f001 ff44 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <MX_GPIO_Init+0x160>)
 8000fda:	f001 ff35 	bl	8002e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	@ 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400

08000ffc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ae      	sub	sp, #184	@ 0xb8
 8001000:	af02      	add	r7, sp, #8
 8001002:	6078      	str	r0, [r7, #4]
    static uint32_t last_buzzer_toggle = 0;
    uint32_t current_time = HAL_GetTick();
 8001004:	f000 fd66 	bl	8001ad4 <HAL_GetTick>
 8001008:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

    if(htim->Instance == TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001014:	f040 80bb 	bne.w	800118e <HAL_TIM_PeriodElapsedCallback+0x192>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13);
 8001018:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800101c:	4891      	ldr	r0, [pc, #580]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800101e:	f002 f8c8 	bl	80031b2 <HAL_GPIO_TogglePin>

        // Start ADC with DMA for all 3 channels
        if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawVal, 3) == HAL_OK)
 8001022:	2203      	movs	r2, #3
 8001024:	4990      	ldr	r1, [pc, #576]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001026:	4891      	ldr	r0, [pc, #580]	@ (800126c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001028:	f000 feb4 	bl	8001d94 <HAL_ADC_Start_DMA>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 80ad 	bne.w	800118e <HAL_TIM_PeriodElapsedCallback+0x192>
        {
            // Check each channel for unconnected pins
            if(rawVal[0] < FLOATING_PIN_THRESHOLD) {
 8001034:	4b8c      	ldr	r3, [pc, #560]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	2b31      	cmp	r3, #49	@ 0x31
 800103a:	d806      	bhi.n	800104a <HAL_TIM_PeriodElapsedCallback+0x4e>
                gaz = 0;
 800103c:	4b8c      	ldr	r3, [pc, #560]	@ (8001270 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800103e:	2200      	movs	r2, #0
 8001040:	801a      	strh	r2, [r3, #0]
                rawVal[0] = 0;
 8001042:	4b89      	ldr	r3, [pc, #548]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001044:	2200      	movs	r2, #0
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	e003      	b.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x56>
            } else {
                gaz = rawVal[0];
 800104a:	4b87      	ldr	r3, [pc, #540]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	4b88      	ldr	r3, [pc, #544]	@ (8001270 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001050:	801a      	strh	r2, [r3, #0]
            }

            // Buzzer control - only activate if gaz > 2000
            if(gaz > 2000) {
 8001052:	4b87      	ldr	r3, [pc, #540]	@ (8001270 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800105a:	d90f      	bls.n	800107c <HAL_TIM_PeriodElapsedCallback+0x80>
                // Check if it's time to toggle the buzzer
                if(current_time - last_buzzer_toggle >= 200) {
 800105c:	4b85      	ldr	r3, [pc, #532]	@ (8001274 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2bc7      	cmp	r3, #199	@ 0xc7
 8001068:	d90d      	bls.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x8a>
                    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800106a:	2108      	movs	r1, #8
 800106c:	4882      	ldr	r0, [pc, #520]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800106e:	f002 f8a0 	bl	80031b2 <HAL_GPIO_TogglePin>
                    last_buzzer_toggle = current_time;
 8001072:	4a80      	ldr	r2, [pc, #512]	@ (8001274 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e004      	b.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x8a>
                }
            } else {
                // Ensure buzzer is off when gas is normal
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2108      	movs	r1, #8
 8001080:	487d      	ldr	r0, [pc, #500]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001082:	f002 f87d 	bl	8003180 <HAL_GPIO_WritePin>
            }

            if(rawVal[1] < FLOATING_PIN_THRESHOLD) {
 8001086:	4b78      	ldr	r3, [pc, #480]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001088:	885b      	ldrh	r3, [r3, #2]
 800108a:	2b31      	cmp	r3, #49	@ 0x31
 800108c:	d806      	bhi.n	800109c <HAL_TIM_PeriodElapsedCallback+0xa0>
                pluit = 0;
 800108e:	4b7b      	ldr	r3, [pc, #492]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001090:	2200      	movs	r2, #0
 8001092:	801a      	strh	r2, [r3, #0]
                rawVal[1] = 0;
 8001094:	4b74      	ldr	r3, [pc, #464]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001096:	2200      	movs	r2, #0
 8001098:	805a      	strh	r2, [r3, #2]
 800109a:	e003      	b.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0xa8>
            } else {
                pluit = rawVal[1];
 800109c:	4b72      	ldr	r3, [pc, #456]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800109e:	885a      	ldrh	r2, [r3, #2]
 80010a0:	4b76      	ldr	r3, [pc, #472]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010a2:	801a      	strh	r2, [r3, #0]
            }
            if(pluit < 2500) {
 80010a4:	4b75      	ldr	r3, [pc, #468]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d80f      	bhi.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0xd4>
                         // Check if it's time to toggle the buzzer
                         if(current_time - last_buzzer_toggle >= 40) {
 80010b0:	4b70      	ldr	r3, [pc, #448]	@ (8001274 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b27      	cmp	r3, #39	@ 0x27
 80010bc:	d90d      	bls.n	80010da <HAL_TIM_PeriodElapsedCallback+0xde>
                             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80010be:	2108      	movs	r1, #8
 80010c0:	486d      	ldr	r0, [pc, #436]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80010c2:	f002 f876 	bl	80031b2 <HAL_GPIO_TogglePin>
                             last_buzzer_toggle = current_time;
 80010c6:	4a6b      	ldr	r2, [pc, #428]	@ (8001274 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80010c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e004      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0xde>
                         }
                     } else {
                         // Ensure buzzer is off when gas is normal
                         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2108      	movs	r1, #8
 80010d4:	4868      	ldr	r0, [pc, #416]	@ (8001278 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80010d6:	f002 f853 	bl	8003180 <HAL_GPIO_WritePin>
                     }

            wind_value = rawVal[2];
 80010da:	4b63      	ldr	r3, [pc, #396]	@ (8001268 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80010dc:	889a      	ldrh	r2, [r3, #4]
 80010de:	4b68      	ldr	r3, [pc, #416]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010e0:	801a      	strh	r2, [r3, #0]
            wind_speed_mps = calculate_wind_speed(wind_value);
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff faf0 	bl	80006cc <calculate_wind_speed>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	4b64      	ldr	r3, [pc, #400]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
            wind_speed_kph = wind_speed_mps * 3.6f;
 80010f6:	4b63      	ldr	r3, [pc, #396]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001288 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	4b61      	ldr	r3, [pc, #388]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001106:	edc3 7a00 	vstr	s15, [r3]

            char gaz_buffer[50];
            snprintf(gaz_buffer, sizeof(gaz_buffer), "Gaz: %.2d\r\n", gaz);
 800110a:	4b59      	ldr	r3, [pc, #356]	@ (8001270 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f107 0008 	add.w	r0, r7, #8
 8001112:	4a5f      	ldr	r2, [pc, #380]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001114:	2132      	movs	r1, #50	@ 0x32
 8001116:	f004 f9df 	bl	80054d8 <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)gaz_buffer, strlen(gaz_buffer), HAL_MAX_DELAY);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f856 	bl	80001d0 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 0108 	add.w	r1, r7, #8
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	4858      	ldr	r0, [pc, #352]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001132:	f003 fe15 	bl	8004d60 <HAL_UART_Transmit>

            char pluit_buffer[50];
            snprintf(pluit_buffer, sizeof(pluit_buffer), "Pluit: %.2d\r\n", pluit);
 8001136:	4b51      	ldr	r3, [pc, #324]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800113e:	4a56      	ldr	r2, [pc, #344]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001140:	2132      	movs	r1, #50	@ 0x32
 8001142:	f004 f9c9 	bl	80054d8 <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)pluit_buffer, strlen(pluit_buffer), HAL_MAX_DELAY);
 8001146:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f840 	bl	80001d0 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	484d      	ldr	r0, [pc, #308]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800115e:	f003 fdff 	bl	8004d60 <HAL_UART_Transmit>

            char wind_buffer[50];
            snprintf(wind_buffer, sizeof(wind_buffer), "wind: %.2d\r\n", wind_value);
 8001162:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800116a:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800116c:	2132      	movs	r1, #50	@ 0x32
 800116e:	f004 f9b3 	bl	80054d8 <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)wind_buffer, strlen(wind_buffer), HAL_MAX_DELAY);
 8001172:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f82a 	bl	80001d0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4842      	ldr	r0, [pc, #264]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800118a:	f003 fde9 	bl	8004d60 <HAL_UART_Transmit>
        }
    }

    if(htim->Instance == TIM3)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a43      	ldr	r2, [pc, #268]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d160      	bne.n	800125a <HAL_TIM_PeriodElapsedCallback+0x25e>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15);
 8001198:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800119c:	4831      	ldr	r0, [pc, #196]	@ (8001264 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800119e:	f002 f808 	bl	80031b2 <HAL_GPIO_TogglePin>

        // Start ADC with DMA for all 3 channels
        if(HAL_ADC_Start_DMA(&hadc2, (uint32_t*)rawVal1, 2) == HAL_OK)
 80011a2:	2202      	movs	r2, #2
 80011a4:	493f      	ldr	r1, [pc, #252]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011a6:	4840      	ldr	r0, [pc, #256]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011a8:	f000 fdf4 	bl	8001d94 <HAL_ADC_Start_DMA>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d153      	bne.n	800125a <HAL_TIM_PeriodElapsedCallback+0x25e>
        {
            // Check each channel for unconnected pins
            if(rawVal1[0] < FLOATING_PIN_THRESHOLD) {
 80011b2:	4b3c      	ldr	r3, [pc, #240]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	2b31      	cmp	r3, #49	@ 0x31
 80011b8:	d807      	bhi.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x1ce>
                ph = 0;
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
                rawVal1[0] = 0;
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	801a      	strh	r2, [r3, #0]
 80011c8:	e010      	b.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x1f0>
            } else {
                ph = (rawVal1[0] / ADC_RESOLUTION) * 14.0f;
 80011ca:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80012b0 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80011e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
            }

            char ph_buffer[50];
            int integer = (int)ph;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	ee17 3a90 	vmov	r3, s15
 80011fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            int decimal = (int)((ph - integer) * 100);
 80011fe:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80012b4 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 3a90 	vmov	r3, s15
 8001224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            snprintf(ph_buffer, sizeof(ph_buffer), "PH: %d.%02d\r\n", integer, decimal);
 8001228:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800122c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001236:	4a20      	ldr	r2, [pc, #128]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001238:	2132      	movs	r1, #50	@ 0x32
 800123a:	f004 f94d 	bl	80054d8 <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)ph_buffer, strlen(ph_buffer), HAL_MAX_DELAY);
 800123e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001242:	4618      	mov	r0, r3
 8001244:	f7fe ffc4 	bl	80001d0 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	480f      	ldr	r0, [pc, #60]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001256:	f003 fd83 	bl	8004d60 <HAL_UART_Transmit>
        }
    }
}
 800125a:	bf00      	nop
 800125c:	37b0      	adds	r7, #176	@ 0xb0
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020c00 	.word	0x40020c00
 8001268:	20000464 	.word	0x20000464
 800126c:	20000080 	.word	0x20000080
 8001270:	20000474 	.word	0x20000474
 8001274:	20000488 	.word	0x20000488
 8001278:	40020800 	.word	0x40020800
 800127c:	20000476 	.word	0x20000476
 8001280:	20000478 	.word	0x20000478
 8001284:	2000047c 	.word	0x2000047c
 8001288:	40666666 	.word	0x40666666
 800128c:	20000480 	.word	0x20000480
 8001290:	08005e64 	.word	0x08005e64
 8001294:	2000041c 	.word	0x2000041c
 8001298:	08005e70 	.word	0x08005e70
 800129c:	08005e80 	.word	0x08005e80
 80012a0:	40000400 	.word	0x40000400
 80012a4:	2000046c 	.word	0x2000046c
 80012a8:	200000c8 	.word	0x200000c8
 80012ac:	20000470 	.word	0x20000470
 80012b0:	457ff000 	.word	0x457ff000
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	08005e90 	.word	0x08005e90

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		  /* User can add his own implementation to report the HAL error return state */
		  __disable_irq();
		  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <HAL_MspInit+0x4c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a65      	ldr	r2, [pc, #404]	@ (80014cc <HAL_ADC_MspInit+0x1b4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d15f      	bne.n	80013fa <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	4b64      	ldr	r3, [pc, #400]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	4a63      	ldr	r2, [pc, #396]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001348:	6453      	str	r3, [r2, #68]	@ 0x44
 800134a:	4b61      	ldr	r3, [pc, #388]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	4b5d      	ldr	r3, [pc, #372]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a5c      	ldr	r2, [pc, #368]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b5a      	ldr	r3, [pc, #360]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001372:	2307      	movs	r3, #7
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4853      	ldr	r0, [pc, #332]	@ (80014d4 <HAL_ADC_MspInit+0x1bc>)
 8001386:	f001 fd5f 	bl	8002e48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800138a:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 800138c:	4a53      	ldr	r2, [pc, #332]	@ (80014dc <HAL_ADC_MspInit+0x1c4>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001390:	4b51      	ldr	r3, [pc, #324]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001396:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800139c:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013a2:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013aa:	4b4b      	ldr	r3, [pc, #300]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b2:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013c0:	4b45      	ldr	r3, [pc, #276]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013cc:	4842      	ldr	r0, [pc, #264]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013ce:	f001 f9cb 	bl	8002768 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80013d8:	f7ff ff70 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3e      	ldr	r2, [pc, #248]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013e2:	4a3d      	ldr	r2, [pc, #244]	@ (80014d8 <HAL_ADC_MspInit+0x1c0>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2101      	movs	r1, #1
 80013ec:	2012      	movs	r0, #18
 80013ee:	f001 f984 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013f2:	2012      	movs	r0, #18
 80013f4:	f001 f99d 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013f8:	e064      	b.n	80014c4 <HAL_ADC_MspInit+0x1ac>
  else if(hadc->Instance==ADC2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a38      	ldr	r2, [pc, #224]	@ (80014e0 <HAL_ADC_MspInit+0x1c8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d15f      	bne.n	80014c4 <HAL_ADC_MspInit+0x1ac>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	4b31      	ldr	r3, [pc, #196]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140c:	4a30      	ldr	r2, [pc, #192]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6453      	str	r3, [r2, #68]	@ 0x44
 8001414:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4a29      	ldr	r2, [pc, #164]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001430:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <HAL_ADC_MspInit+0x1b8>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800143c:	2318      	movs	r3, #24
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4821      	ldr	r0, [pc, #132]	@ (80014d4 <HAL_ADC_MspInit+0x1bc>)
 8001450:	f001 fcfa 	bl	8002e48 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001454:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_ADC_MspInit+0x1d0>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 800145c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001460:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800147c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001498:	4812      	ldr	r0, [pc, #72]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 800149a:	f001 f965 	bl	8002768 <HAL_DMA_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_ADC_MspInit+0x190>
      Error_Handler();
 80014a4:	f7ff ff0a 	bl	80012bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ae:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <HAL_ADC_MspInit+0x1cc>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2101      	movs	r1, #1
 80014b8:	2012      	movs	r0, #18
 80014ba:	f001 f91e 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014be:	2012      	movs	r0, #18
 80014c0:	f001 f937 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	@ 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000110 	.word	0x20000110
 80014dc:	40026410 	.word	0x40026410
 80014e0:	40012100 	.word	0x40012100
 80014e4:	20000170 	.word	0x20000170
 80014e8:	40026440 	.word	0x40026440

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12b      	bne.n	8001566 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23c0      	movs	r3, #192	@ 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153a:	2304      	movs	r3, #4
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <HAL_I2C_MspInit+0x8c>)
 8001546:	f001 fc7f 	bl	8002e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 8001554:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001558:	6413      	str	r3, [r2, #64]	@ 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_I2C_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a34      	ldr	r2, [pc, #208]	@ (800165c <HAL_TIM_Base_MspInit+0xe0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10e      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a32      	ldr	r2, [pc, #200]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015aa:	e052      	b.n	8001652 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b4:	d116      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201c      	movs	r0, #28
 80015d8:	f001 f88f 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015dc:	201c      	movs	r0, #28
 80015de:	f001 f8a8 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 80015e2:	e036      	b.n	8001652 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <HAL_TIM_Base_MspInit+0xe8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d116      	bne.n	800161c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201d      	movs	r0, #29
 8001610:	f001 f873 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001614:	201d      	movs	r0, #29
 8001616:	f001 f88c 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 800161a:	e01a      	b.n	8001652 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <HAL_TIM_Base_MspInit+0xec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d115      	bne.n	8001652 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_TIM_Base_MspInit+0xe4>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	201e      	movs	r0, #30
 8001648:	f001 f857 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800164c:	201e      	movs	r0, #30
 800164e:	f001 f870 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010000 	.word	0x40010000
 8001660:	40023800 	.word	0x40023800
 8001664:	40000400 	.word	0x40000400
 8001668:	40000800 	.word	0x40000800

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b090      	sub	sp, #64	@ 0x40
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	@ (8001820 <HAL_UART_MspInit+0x1b4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12d      	bne.n	80016ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001692:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d8:	2307      	movs	r3, #7
 80016da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e0:	4619      	mov	r1, r3
 80016e2:	4851      	ldr	r0, [pc, #324]	@ (8001828 <HAL_UART_MspInit+0x1bc>)
 80016e4:	f001 fbb0 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016e8:	e095      	b.n	8001816 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a4f      	ldr	r2, [pc, #316]	@ (800182c <HAL_UART_MspInit+0x1c0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d12c      	bne.n	800174e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	4a49      	ldr	r2, [pc, #292]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80016fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001702:	6413      	str	r3, [r2, #64]	@ 0x40
 8001704:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	4b43      	ldr	r3, [pc, #268]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	4a42      	ldr	r2, [pc, #264]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001720:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800172c:	2360      	movs	r3, #96	@ 0x60
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173c:	2307      	movs	r3, #7
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	4619      	mov	r1, r3
 8001746:	483a      	ldr	r0, [pc, #232]	@ (8001830 <HAL_UART_MspInit+0x1c4>)
 8001748:	f001 fb7e 	bl	8002e48 <HAL_GPIO_Init>
}
 800174c:	e063      	b.n	8001816 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <HAL_UART_MspInit+0x1c8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d12d      	bne.n	80017b4 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	4a30      	ldr	r2, [pc, #192]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001762:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001766:	6413      	str	r3, [r2, #64]	@ 0x40
 8001768:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177c:	4a29      	ldr	r2, [pc, #164]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	6313      	str	r3, [r2, #48]	@ 0x30
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001790:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a2:	2307      	movs	r3, #7
 80017a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4822      	ldr	r0, [pc, #136]	@ (8001838 <HAL_UART_MspInit+0x1cc>)
 80017ae:	f001 fb4b 	bl	8002e48 <HAL_GPIO_Init>
}
 80017b2:	e030      	b.n	8001816 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a20      	ldr	r2, [pc, #128]	@ (800183c <HAL_UART_MspInit+0x1d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12b      	bne.n	8001816 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_UART_MspInit+0x1b8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f6:	23c0      	movs	r3, #192	@ 0xc0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001806:	2308      	movs	r3, #8
 8001808:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180e:	4619      	mov	r1, r3
 8001810:	480b      	ldr	r0, [pc, #44]	@ (8001840 <HAL_UART_MspInit+0x1d4>)
 8001812:	f001 fb19 	bl	8002e48 <HAL_GPIO_Init>
}
 8001816:	bf00      	nop
 8001818:	3740      	adds	r7, #64	@ 0x40
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40011000 	.word	0x40011000
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000
 800182c:	40004400 	.word	0x40004400
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40004800 	.word	0x40004800
 8001838:	40020400 	.word	0x40020400
 800183c:	40011400 	.word	0x40011400
 8001840:	40020800 	.word	0x40020800

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f000 f907 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <ADC_IRQHandler+0x14>)
 80018aa:	f000 f962 	bl	8001b72 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018ae:	4803      	ldr	r0, [pc, #12]	@ (80018bc <ADC_IRQHandler+0x18>)
 80018b0:	f000 f95f 	bl	8001b72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000080 	.word	0x20000080
 80018bc:	200000c8 	.word	0x200000c8

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <TIM2_IRQHandler+0x10>)
 80018c6:	f002 fe45 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000026c 	.word	0x2000026c

080018d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <TIM3_IRQHandler+0x10>)
 80018da:	f002 fe3b 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002b4 	.word	0x200002b4

080018e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <TIM4_IRQHandler+0x10>)
 80018ee:	f002 fe31 	bl	8004554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002fc 	.word	0x200002fc

080018fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <DMA2_Stream0_IRQHandler+0x10>)
 8001902:	f001 f837 	bl	8002974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000110 	.word	0x20000110

08001910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <DMA2_Stream2_IRQHandler+0x10>)
 8001916:	f001 f82d 	bl	8002974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000170 	.word	0x20000170

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f003 fdfc 	bl	8005550 <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20020000 	.word	0x20020000
 8001984:	00000400 	.word	0x00000400
 8001988:	2000048c 	.word	0x2000048c
 800198c:	200005e0 	.word	0x200005e0

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019b8:	f7ff ffea 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	@ (80019f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f003 fdbb 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7fe febb 	bl	8000760 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019f8:	08005f04 	.word	0x08005f04
  ldr r2, =_sbss
 80019fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a00:	200005dc 	.word	0x200005dc

08001a04 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <CAN1_RX0_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <HAL_Init+0x40>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <HAL_Init+0x40>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <HAL_Init+0x40>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 fe57 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	200f      	movs	r0, #15
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff fc44 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fe6f 	bl	800274e <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f000 fe37 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000490 	.word	0x20000490

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000490 	.word	0x20000490

08001aec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e033      	b.n	8001b6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fc04 	bl	8001318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b32:	f023 0302 	bic.w	r3, r3, #2
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fb78 	bl	8002234 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	f043 0201 	orr.w	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b5a:	e001      	b.n	8001b60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d049      	beq.n	8001c3c <HAL_ADC_IRQHandler+0xca>
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d046      	beq.n	8001c3c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d12b      	bne.n	8001c2c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d127      	bne.n	8001c2c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d119      	bne.n	8001c2c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0220 	bic.w	r2, r2, #32
 8001c06:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7fe fd3d 	bl	80006ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0212 	mvn.w	r2, #18
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d057      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x190>
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d054      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d139      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c84:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d12b      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d124      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d11d      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ccc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fc1c 	bl	8002530 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 020c 	mvn.w	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d10:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x1d6>
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d014      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10d      	bne.n	8001d48 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f945 	bl	8001fc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0201 	mvn.w	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d56:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_ADC_IRQHandler+0x218>
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0220 	mvn.w	r2, #32
 8001d78:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f92e 	bl	8001fdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0220 	mvn.w	r2, #32
 8001d88:	601a      	str	r2, [r3, #0]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Start_DMA+0x1e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e0e9      	b.n	8001f86 <HAL_ADC_Start_DMA+0x1f2>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d018      	beq.n	8001dfa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8001f90 <HAL_ADC_Start_DMA+0x1fc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6d      	ldr	r2, [pc, #436]	@ (8001f94 <HAL_ADC_Start_DMA+0x200>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9a      	lsrs	r2, r3, #18
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f9      	bne.n	8001dee <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e08:	d107      	bne.n	8001e1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e18:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	f040 80a1 	bne.w	8001f6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e68:	d106      	bne.n	8001e78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f023 0206 	bic.w	r2, r3, #6
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e76:	e002      	b.n	8001e7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <HAL_ADC_Start_DMA+0x204>)
 8001e88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8e:	4a43      	ldr	r2, [pc, #268]	@ (8001f9c <HAL_ADC_Start_DMA+0x208>)
 8001e90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e96:	4a42      	ldr	r2, [pc, #264]	@ (8001fa0 <HAL_ADC_Start_DMA+0x20c>)
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9e:	4a41      	ldr	r2, [pc, #260]	@ (8001fa4 <HAL_ADC_Start_DMA+0x210>)
 8001ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001eba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	334c      	adds	r3, #76	@ 0x4c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f000 fcf2 	bl	80028c4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d12a      	bne.n	8001f42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <HAL_ADC_Start_DMA+0x214>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d015      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x18e>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2c      	ldr	r2, [pc, #176]	@ (8001fac <HAL_ADC_Start_DMA+0x218>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_Start_DMA+0x178>
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <HAL_ADC_Start_DMA+0x204>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a27      	ldr	r2, [pc, #156]	@ (8001fb0 <HAL_ADC_Start_DMA+0x21c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d136      	bne.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
 8001f16:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_ADC_Start_DMA+0x204>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d130      	bne.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d129      	bne.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	e020      	b.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a18      	ldr	r2, [pc, #96]	@ (8001fa8 <HAL_ADC_Start_DMA+0x214>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d11b      	bne.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d114      	bne.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	e00b      	b.n	8001f84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	0800242d 	.word	0x0800242d
 8001fa0:	080024e7 	.word	0x080024e7
 8001fa4:	08002503 	.word	0x08002503
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	40012100 	.word	0x40012100
 8001fb0:	40012200 	.word	0x40012200

08001fb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1c>
 8002008:	2302      	movs	r3, #2
 800200a:	e105      	b.n	8002218 <HAL_ADC_ConfigChannel+0x228>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b09      	cmp	r3, #9
 800201a:	d925      	bls.n	8002068 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68d9      	ldr	r1, [r3, #12]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	3b1e      	subs	r3, #30
 8002032:	2207      	movs	r2, #7
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43da      	mvns	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	400a      	ands	r2, r1
 8002040:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68d9      	ldr	r1, [r3, #12]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	4618      	mov	r0, r3
 8002054:	4603      	mov	r3, r0
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4403      	add	r3, r0
 800205a:	3b1e      	subs	r3, #30
 800205c:	409a      	lsls	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	e022      	b.n	80020ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	2207      	movs	r2, #7
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	400a      	ands	r2, r1
 800208a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6919      	ldr	r1, [r3, #16]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	4618      	mov	r0, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4403      	add	r3, r0
 80020a4:	409a      	lsls	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d824      	bhi.n	8002100 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b05      	subs	r3, #5
 80020c8:	221f      	movs	r2, #31
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4618      	mov	r0, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b05      	subs	r3, #5
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80020fe:	e04c      	b.n	800219a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d824      	bhi.n	8002152 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b23      	subs	r3, #35	@ 0x23
 800211a:	221f      	movs	r2, #31
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43da      	mvns	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	400a      	ands	r2, r1
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b23      	subs	r3, #35	@ 0x23
 8002144:	fa00 f203 	lsl.w	r2, r0, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002150:	e023      	b.n	800219a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b41      	subs	r3, #65	@ 0x41
 8002164:	221f      	movs	r2, #31
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b41      	subs	r3, #65	@ 0x41
 800218e:	fa00 f203 	lsl.w	r2, r0, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_ADC_ConfigChannel+0x234>)
 800219c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a21      	ldr	r2, [pc, #132]	@ (8002228 <HAL_ADC_ConfigChannel+0x238>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1cc>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b12      	cmp	r3, #18
 80021ae:	d105      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_ADC_ConfigChannel+0x238>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d123      	bne.n	800220e <HAL_ADC_ConfigChannel+0x21e>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d003      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x1e6>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b11      	cmp	r3, #17
 80021d4:	d11b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d111      	bne.n	800220e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <HAL_ADC_ConfigChannel+0x23c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a10      	ldr	r2, [pc, #64]	@ (8002230 <HAL_ADC_ConfigChannel+0x240>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000
 800222c:	20000000 	.word	0x20000000
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223c:	4b79      	ldr	r3, [pc, #484]	@ (8002424 <ADC_Init+0x1f0>)
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <ADC_Init+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e00f      	b.n	8002332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002330:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0202 	bic.w	r2, r2, #2
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	005a      	lsls	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800236e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800237e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	3b01      	subs	r3, #1
 800238c:	035a      	lsls	r2, r3, #13
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e007      	b.n	80023a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	051a      	lsls	r2, r3, #20
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	029a      	lsls	r2, r3, #10
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40012300 	.word	0x40012300
 8002428:	0f000001 	.word	0x0f000001

0800242c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002438:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002442:	2b00      	cmp	r3, #0
 8002444:	d13c      	bne.n	80024c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12b      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d127      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002480:	2b00      	cmp	r3, #0
 8002482:	d119      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0220 	bic.w	r2, r2, #32
 8002492:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7fe f8f7 	bl	80006ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024be:	e00e      	b.n	80024de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fd85 	bl	8001fdc <HAL_ADC_ErrorCallback>
}
 80024d2:	e004      	b.n	80024de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fd5d 	bl	8001fb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2240      	movs	r2, #64	@ 0x40
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fd5a 	bl	8001fdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	@ (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	@ (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	@ (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	@ 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff3e 	bl	800258c <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff8e 	bl	8002638 <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5d 	bl	80025e4 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff31 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa2 	bl	80026a0 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff f9ae 	bl	8001ad4 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e099      	b.n	80028b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a4:	e00f      	b.n	80027c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a6:	f7ff f995 	bl	8001ad4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d908      	bls.n	80027c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2203      	movs	r2, #3
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e078      	b.n	80028b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e8      	bne.n	80027a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4b38      	ldr	r3, [pc, #224]	@ (80028c0 <HAL_DMA_Init+0x158>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	2b04      	cmp	r3, #4
 800281e:	d107      	bne.n	8002830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	4313      	orrs	r3, r2
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	2b04      	cmp	r3, #4
 8002858:	d117      	bne.n	800288a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00e      	beq.n	800288a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fa6f 	bl	8002d50 <DMA_CheckFifoParam>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2240      	movs	r2, #64	@ 0x40
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002886:	2301      	movs	r3, #1
 8002888:	e016      	b.n	80028b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa26 	bl	8002ce4 <DMA_CalcBaseAndBitshift>
 8002898:	4603      	mov	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	223f      	movs	r2, #63	@ 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	f010803f 	.word	0xf010803f

080028c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_DMA_Start_IT+0x26>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e040      	b.n	800296c <HAL_DMA_Start_IT+0xa8>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d12f      	bne.n	800295e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2202      	movs	r2, #2
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f9b8 	bl	8002c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	223f      	movs	r2, #63	@ 0x3f
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0216 	orr.w	r2, r2, #22
 8002932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0208 	orr.w	r2, r2, #8
 800294a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e005      	b.n	800296a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002966:	2302      	movs	r3, #2
 8002968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800296a:	7dfb      	ldrb	r3, [r7, #23]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002980:	4b8e      	ldr	r3, [pc, #568]	@ (8002bbc <HAL_DMA_IRQHandler+0x248>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a8e      	ldr	r2, [pc, #568]	@ (8002bc0 <HAL_DMA_IRQHandler+0x24c>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0a9b      	lsrs	r3, r3, #10
 800298c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	2208      	movs	r2, #8
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0204 	bic.w	r2, r2, #4
 80029c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029cc:	2208      	movs	r2, #8
 80029ce:	409a      	lsls	r2, r3
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d012      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	2201      	movs	r2, #1
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d012      	beq.n	8002a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	2204      	movs	r2, #4
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a44:	f043 0204 	orr.w	r2, r3, #4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	2210      	movs	r2, #16
 8002a52:	409a      	lsls	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d043      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d03c      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	2210      	movs	r2, #16
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d018      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d024      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
 8002aa2:	e01f      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e016      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0208 	bic.w	r2, r2, #8
 8002ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	2220      	movs	r2, #32
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 808f 	beq.w	8002c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8087 	beq.w	8002c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d136      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0216 	bic.w	r2, r2, #22
 8002b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_DMA_IRQHandler+0x1da>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0208 	bic.w	r2, r2, #8
 8002b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	223f      	movs	r2, #63	@ 0x3f
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d07e      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
        }
        return;
 8002b8a:	e079      	b.n	8002c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01d      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d031      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	e02c      	b.n	8002c14 <HAL_DMA_IRQHandler+0x2a0>
 8002bba:	bf00      	nop
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d023      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
 8002bd4:	e01e      	b.n	8002c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0210 	bic.w	r2, r2, #16
 8002bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d032      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	3301      	adds	r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d307      	bcc.n	8002c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f2      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x2cc>
 8002c5a:	e000      	b.n	8002c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
 8002c7e:	e000      	b.n	8002c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c80:	bf00      	nop
    }
  }
}
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d108      	bne.n	8002cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cc6:	e007      	b.n	8002cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3b10      	subs	r3, #16
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <DMA_CalcBaseAndBitshift+0x64>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cfe:	4a13      	ldr	r2, [pc, #76]	@ (8002d4c <DMA_CalcBaseAndBitshift+0x68>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d909      	bls.n	8002d26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d1a:	f023 0303 	bic.w	r3, r3, #3
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d24:	e007      	b.n	8002d36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d2e:	f023 0303 	bic.w	r3, r3, #3
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	aaaaaaab 	.word	0xaaaaaaab
 8002d4c:	08005eb8 	.word	0x08005eb8

08002d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11f      	bne.n	8002daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d856      	bhi.n	8002e1e <DMA_CheckFifoParam+0xce>
 8002d70:	a201      	add	r2, pc, #4	@ (adr r2, 8002d78 <DMA_CheckFifoParam+0x28>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d9b 	.word	0x08002d9b
 8002d80:	08002d89 	.word	0x08002d89
 8002d84:	08002e1f 	.word	0x08002e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d046      	beq.n	8002e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e043      	b.n	8002e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002da2:	d140      	bne.n	8002e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da8:	e03d      	b.n	8002e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db2:	d121      	bne.n	8002df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d837      	bhi.n	8002e2a <DMA_CheckFifoParam+0xda>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <DMA_CheckFifoParam+0x70>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002dd7 	.word	0x08002dd7
 8002dc8:	08002dd1 	.word	0x08002dd1
 8002dcc:	08002de9 	.word	0x08002de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e030      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d025      	beq.n	8002e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de6:	e022      	b.n	8002e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002df0:	d11f      	bne.n	8002e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002df6:	e01c      	b.n	8002e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d903      	bls.n	8002e06 <DMA_CheckFifoParam+0xb6>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d003      	beq.n	8002e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e04:	e018      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0a:	e015      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00e      	beq.n	8002e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e00b      	b.n	8002e36 <DMA_CheckFifoParam+0xe6>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e00a      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e008      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
 8002e28:	e006      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e004      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e002      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
    }
  } 
  
  return status; 
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e16b      	b.n	800313c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f040 815a 	bne.w	8003136 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d005      	beq.n	8002e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d130      	bne.n	8002efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 0201 	and.w	r2, r3, #1
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d017      	beq.n	8002f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d123      	bne.n	8002f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	08da      	lsrs	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3208      	adds	r2, #8
 8002f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3208      	adds	r2, #8
 8002f86:	69b9      	ldr	r1, [r7, #24]
 8002f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80b4 	beq.w	8003136 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b60      	ldr	r3, [pc, #384]	@ (8003154 <HAL_GPIO_Init+0x30c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003154 <HAL_GPIO_Init+0x30c>)
 8002fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fde:	4b5d      	ldr	r3, [pc, #372]	@ (8003154 <HAL_GPIO_Init+0x30c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fea:	4a5b      	ldr	r2, [pc, #364]	@ (8003158 <HAL_GPIO_Init+0x310>)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a52      	ldr	r2, [pc, #328]	@ (800315c <HAL_GPIO_Init+0x314>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02b      	beq.n	800306e <HAL_GPIO_Init+0x226>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a51      	ldr	r2, [pc, #324]	@ (8003160 <HAL_GPIO_Init+0x318>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d025      	beq.n	800306a <HAL_GPIO_Init+0x222>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a50      	ldr	r2, [pc, #320]	@ (8003164 <HAL_GPIO_Init+0x31c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01f      	beq.n	8003066 <HAL_GPIO_Init+0x21e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4f      	ldr	r2, [pc, #316]	@ (8003168 <HAL_GPIO_Init+0x320>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d019      	beq.n	8003062 <HAL_GPIO_Init+0x21a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4e      	ldr	r2, [pc, #312]	@ (800316c <HAL_GPIO_Init+0x324>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d013      	beq.n	800305e <HAL_GPIO_Init+0x216>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4d      	ldr	r2, [pc, #308]	@ (8003170 <HAL_GPIO_Init+0x328>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00d      	beq.n	800305a <HAL_GPIO_Init+0x212>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4c      	ldr	r2, [pc, #304]	@ (8003174 <HAL_GPIO_Init+0x32c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <HAL_GPIO_Init+0x20e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4b      	ldr	r2, [pc, #300]	@ (8003178 <HAL_GPIO_Init+0x330>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_GPIO_Init+0x20a>
 800304e:	2307      	movs	r3, #7
 8003050:	e00e      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003052:	2308      	movs	r3, #8
 8003054:	e00c      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003056:	2306      	movs	r3, #6
 8003058:	e00a      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800305a:	2305      	movs	r3, #5
 800305c:	e008      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800305e:	2304      	movs	r3, #4
 8003060:	e006      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003062:	2303      	movs	r3, #3
 8003064:	e004      	b.n	8003070 <HAL_GPIO_Init+0x228>
 8003066:	2302      	movs	r3, #2
 8003068:	e002      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x228>
 800306e:	2300      	movs	r3, #0
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	f002 0203 	and.w	r2, r2, #3
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	4093      	lsls	r3, r2
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003080:	4935      	ldr	r1, [pc, #212]	@ (8003158 <HAL_GPIO_Init+0x310>)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	3302      	adds	r3, #2
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308e:	4b3b      	ldr	r3, [pc, #236]	@ (800317c <HAL_GPIO_Init+0x334>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030b2:	4a32      	ldr	r2, [pc, #200]	@ (800317c <HAL_GPIO_Init+0x334>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b8:	4b30      	ldr	r3, [pc, #192]	@ (800317c <HAL_GPIO_Init+0x334>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030dc:	4a27      	ldr	r2, [pc, #156]	@ (800317c <HAL_GPIO_Init+0x334>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030e2:	4b26      	ldr	r3, [pc, #152]	@ (800317c <HAL_GPIO_Init+0x334>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003106:	4a1d      	ldr	r2, [pc, #116]	@ (800317c <HAL_GPIO_Init+0x334>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_GPIO_Init+0x334>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003130:	4a12      	ldr	r2, [pc, #72]	@ (800317c <HAL_GPIO_Init+0x334>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3301      	adds	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	f67f ae90 	bls.w	8002e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3724      	adds	r7, #36	@ 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	40013800 	.word	0x40013800
 800315c:	40020000 	.word	0x40020000
 8003160:	40020400 	.word	0x40020400
 8003164:	40020800 	.word	0x40020800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40021000 	.word	0x40021000
 8003170:	40021400 	.word	0x40021400
 8003174:	40021800 	.word	0x40021800
 8003178:	40021c00 	.word	0x40021c00
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c4:	887a      	ldrh	r2, [r7, #2]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	041a      	lsls	r2, r3, #16
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	400b      	ands	r3, r1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	619a      	str	r2, [r3, #24]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e12b      	b.n	8003452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe f96c 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	@ 0x24
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800323a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800324a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800324c:	f001 f89a 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 8003250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a81      	ldr	r2, [pc, #516]	@ (800345c <HAL_I2C_Init+0x274>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d807      	bhi.n	800326c <HAL_I2C_Init+0x84>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a80      	ldr	r2, [pc, #512]	@ (8003460 <HAL_I2C_Init+0x278>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e006      	b.n	800327a <HAL_I2C_Init+0x92>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a7d      	ldr	r2, [pc, #500]	@ (8003464 <HAL_I2C_Init+0x27c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	bf94      	ite	ls
 8003274:	2301      	movls	r3, #1
 8003276:	2300      	movhi	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0e7      	b.n	8003452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a78      	ldr	r2, [pc, #480]	@ (8003468 <HAL_I2C_Init+0x280>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0c9b      	lsrs	r3, r3, #18
 800328c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a6a      	ldr	r2, [pc, #424]	@ (800345c <HAL_I2C_Init+0x274>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d802      	bhi.n	80032bc <HAL_I2C_Init+0xd4>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3301      	adds	r3, #1
 80032ba:	e009      	b.n	80032d0 <HAL_I2C_Init+0xe8>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	4a69      	ldr	r2, [pc, #420]	@ (800346c <HAL_I2C_Init+0x284>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	3301      	adds	r3, #1
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	495c      	ldr	r1, [pc, #368]	@ (800345c <HAL_I2C_Init+0x274>)
 80032ec:	428b      	cmp	r3, r1
 80032ee:	d819      	bhi.n	8003324 <HAL_I2C_Init+0x13c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1e59      	subs	r1, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003304:	400b      	ands	r3, r1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_I2C_Init+0x138>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1e59      	subs	r1, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fbb1 f3f3 	udiv	r3, r1, r3
 8003318:	3301      	adds	r3, #1
 800331a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331e:	e051      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 8003320:	2304      	movs	r3, #4
 8003322:	e04f      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d111      	bne.n	8003350 <HAL_I2C_Init+0x168>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	440b      	add	r3, r1
 800333a:	fbb0 f3f3 	udiv	r3, r0, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e012      	b.n	8003376 <HAL_I2C_Init+0x18e>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Init+0x196>
 800337a:	2301      	movs	r3, #1
 800337c:	e022      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10e      	bne.n	80033a4 <HAL_I2C_Init+0x1bc>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e58      	subs	r0, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	440b      	add	r3, r1
 8003394:	fbb0 f3f3 	udiv	r3, r0, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033a2:	e00f      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	0099      	lsls	r1, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6809      	ldr	r1, [r1, #0]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6911      	ldr	r1, [r2, #16]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68d2      	ldr	r2, [r2, #12]
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	000186a0 	.word	0x000186a0
 8003460:	001e847f 	.word	0x001e847f
 8003464:	003d08ff 	.word	0x003d08ff
 8003468:	431bde83 	.word	0x431bde83
 800346c:	10624dd3 	.word	0x10624dd3

08003470 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	461a      	mov	r2, r3
 800347c:	460b      	mov	r3, r1
 800347e:	817b      	strh	r3, [r7, #10]
 8003480:	4613      	mov	r3, r2
 8003482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7fe fb26 	bl	8001ad4 <HAL_GetTick>
 8003488:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b20      	cmp	r3, #32
 8003494:	f040 80e0 	bne.w	8003658 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2319      	movs	r3, #25
 800349e:	2201      	movs	r2, #1
 80034a0:	4970      	ldr	r1, [pc, #448]	@ (8003664 <HAL_I2C_Master_Transmit+0x1f4>)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f964 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0d3      	b.n	800365a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_I2C_Master_Transmit+0x50>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0cc      	b.n	800365a <HAL_I2C_Master_Transmit+0x1ea>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d007      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2221      	movs	r2, #33	@ 0x21
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2210      	movs	r2, #16
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	893a      	ldrh	r2, [r7, #8]
 8003516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a50      	ldr	r2, [pc, #320]	@ (8003668 <HAL_I2C_Master_Transmit+0x1f8>)
 8003526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003528:	8979      	ldrh	r1, [r7, #10]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f89c 	bl	800366c <I2C_MasterRequestWrite>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e08d      	b.n	800365a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003554:	e066      	b.n	8003624 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	6a39      	ldr	r1, [r7, #32]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fa22 	bl	80039a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	2b04      	cmp	r3, #4
 800356c:	d107      	bne.n	800357e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06b      	b.n	800365a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11b      	bne.n	80035f8 <HAL_I2C_Master_Transmit+0x188>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d017      	beq.n	80035f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	6a39      	ldr	r1, [r7, #32]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fa19 	bl	8003a34 <I2C_WaitOnBTFFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	2b04      	cmp	r3, #4
 800360e:	d107      	bne.n	8003620 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e01a      	b.n	800365a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d194      	bne.n	8003556 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	00100002 	.word	0x00100002
 8003668:	ffff0000 	.word	0xffff0000

0800366c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d006      	beq.n	8003696 <I2C_MasterRequestWrite+0x2a>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d003      	beq.n	8003696 <I2C_MasterRequestWrite+0x2a>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003694:	d108      	bne.n	80036a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00b      	b.n	80036c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	d107      	bne.n	80036c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f84f 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e6:	d103      	bne.n	80036f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e035      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fc:	d108      	bne.n	8003710 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	e01b      	b.n	8003748 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	11db      	asrs	r3, r3, #7
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0306 	and.w	r3, r3, #6
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f063 030f 	orn	r3, r3, #15
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	490e      	ldr	r1, [pc, #56]	@ (8003768 <I2C_MasterRequestWrite+0xfc>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f898 	bl	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e010      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4907      	ldr	r1, [pc, #28]	@ (800376c <I2C_MasterRequestWrite+0x100>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f888 	bl	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	00010008 	.word	0x00010008
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003780:	e048      	b.n	8003814 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d044      	beq.n	8003814 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe f9a3 	bl	8001ad4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d139      	bne.n	8003814 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10d      	bne.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	43da      	mvns	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	e00c      	b.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	43da      	mvns	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4013      	ands	r3, r2
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d116      	bne.n	8003814 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e023      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10d      	bne.n	800383a <I2C_WaitOnFlagUntilTimeout+0xca>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	43da      	mvns	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	e00c      	b.n	8003854 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	43da      	mvns	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4013      	ands	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	429a      	cmp	r2, r3
 8003858:	d093      	beq.n	8003782 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003872:	e071      	b.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003882:	d123      	bne.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003892:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800389c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f043 0204 	orr.w	r2, r3, #4
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e067      	b.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d041      	beq.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fe f8fe 	bl	8001ad4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d136      	bne.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10c      	bne.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e00b      	b.n	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	43da      	mvns	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4013      	ands	r3, r2
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e021      	b.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10c      	bne.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	43da      	mvns	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4013      	ands	r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e00b      	b.n	8003994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	f47f af6d 	bne.w	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b0:	e034      	b.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f886 	bl	8003ac4 <I2C_IsAcknowledgeFailed>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e034      	b.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d028      	beq.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe f883 	bl	8001ad4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11d      	bne.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b80      	cmp	r3, #128	@ 0x80
 80039ec:	d016      	beq.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d1c3      	bne.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a40:	e034      	b.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f83e 	bl	8003ac4 <I2C_IsAcknowledgeFailed>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e034      	b.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d028      	beq.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe f83b 	bl	8001ad4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11d      	bne.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d016      	beq.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e007      	b.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d1c3      	bne.n	8003a42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ada:	d11b      	bne.n	8003b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	f043 0204 	orr.w	r2, r3, #4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e267      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d075      	beq.n	8003c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b42:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d00c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4e:	4b85      	ldr	r3, [pc, #532]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d112      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5a:	4b82      	ldr	r3, [pc, #520]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b68:	4b7e      	ldr	r3, [pc, #504]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05b      	beq.n	8003c2c <HAL_RCC_OscConfig+0x108>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d157      	bne.n	8003c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e242      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b88:	d106      	bne.n	8003b98 <HAL_RCC_OscConfig+0x74>
 8003b8a:	4b76      	ldr	r3, [pc, #472]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a75      	ldr	r2, [pc, #468]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x98>
 8003ba2:	4b70      	ldr	r3, [pc, #448]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b6d      	ldr	r3, [pc, #436]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb0>
 8003bbc:	4b69      	ldr	r3, [pc, #420]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a68      	ldr	r2, [pc, #416]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b66      	ldr	r3, [pc, #408]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a65      	ldr	r2, [pc, #404]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd ff7a 	bl	8001ad4 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd ff76 	bl	8001ad4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e207      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xc0>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fd ff66 	bl	8001ad4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd ff62 	bl	8001ad4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1f3      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	4b51      	ldr	r3, [pc, #324]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0xe8>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b44      	ldr	r3, [pc, #272]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b41      	ldr	r3, [pc, #260]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x152>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1c7      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4937      	ldr	r1, [pc, #220]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e03a      	b.n	8003d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b34      	ldr	r3, [pc, #208]	@ (8003d68 <HAL_RCC_OscConfig+0x244>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7fd ff1b 	bl	8001ad4 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fd ff17 	bl	8001ad4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1a8      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b28      	ldr	r3, [pc, #160]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4925      	ldr	r1, [pc, #148]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
 8003cd4:	e015      	b.n	8003d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_RCC_OscConfig+0x244>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fefa 	bl	8001ad4 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fd fef6 	bl	8001ad4 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e187      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <HAL_RCC_OscConfig+0x248>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fd feda 	bl	8001ad4 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fd fed6 	bl	8001ad4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e167      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x200>
 8003d42:	e01b      	b.n	8003d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d44:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <HAL_RCC_OscConfig+0x248>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fec3 	bl	8001ad4 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	e00e      	b.n	8003d70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fd febf 	bl	8001ad4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d907      	bls.n	8003d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e150      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	42470000 	.word	0x42470000
 8003d6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b88      	ldr	r3, [pc, #544]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ea      	bne.n	8003d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8097 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b81      	ldr	r3, [pc, #516]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	4a7c      	ldr	r2, [pc, #496]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003daa:	4b7a      	ldr	r3, [pc, #488]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b77      	ldr	r3, [pc, #476]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d118      	bne.n	8003df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b74      	ldr	r3, [pc, #464]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a73      	ldr	r2, [pc, #460]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fd fe7f 	bl	8001ad4 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fd fe7b 	bl	8001ad4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e10c      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	4b6a      	ldr	r3, [pc, #424]	@ (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2ea>
 8003e00:	4b64      	ldr	r3, [pc, #400]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e04:	4a63      	ldr	r2, [pc, #396]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0c:	e01c      	b.n	8003e48 <HAL_RCC_OscConfig+0x324>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x30c>
 8003e16:	4b5f      	ldr	r3, [pc, #380]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e22:	4b5c      	ldr	r3, [pc, #368]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	4a5b      	ldr	r2, [pc, #364]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0x324>
 8003e30:	4b58      	ldr	r3, [pc, #352]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a57      	ldr	r2, [pc, #348]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	4b55      	ldr	r3, [pc, #340]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	4a54      	ldr	r2, [pc, #336]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fe40 	bl	8001ad4 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd fe3c 	bl	8001ad4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0cb      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	4b49      	ldr	r3, [pc, #292]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ee      	beq.n	8003e58 <HAL_RCC_OscConfig+0x334>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fd fe2a 	bl	8001ad4 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fd fe26 	bl	8001ad4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0b5      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ee      	bne.n	8003e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	4a38      	ldr	r2, [pc, #224]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a1 	beq.w	8004004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec2:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d05c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d141      	bne.n	8003f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b31      	ldr	r3, [pc, #196]	@ (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fd fdfa 	bl	8001ad4 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd fdf6 	bl	8001ad4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e087      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	491b      	ldr	r1, [pc, #108]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fd fdcf 	bl	8001ad4 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fd fdcb 	bl	8001ad4 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e05c      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x416>
 8003f58:	e054      	b.n	8004004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd fdb8 	bl	8001ad4 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd fdb4 	bl	8001ad4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e045      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x444>
 8003f86:	e03d      	b.n	8004004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e038      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x4ec>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d028      	beq.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d121      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11a      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cc      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b68      	ldr	r3, [pc, #416]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d90c      	bls.n	8004050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b65      	ldr	r3, [pc, #404]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a58      	ldr	r2, [pc, #352]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a52      	ldr	r2, [pc, #328]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800408a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d119      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b3b      	ldr	r3, [pc, #236]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e067      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4934      	ldr	r1, [pc, #208]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fd fce6 	bl	8001ad4 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fd fce2 	bl	8001ad4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e04f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b2b      	ldr	r3, [pc, #172]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b22      	ldr	r3, [pc, #136]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	@ (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4602      	mov	r2, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	490a      	ldr	r1, [pc, #40]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	5ccb      	ldrb	r3, [r1, r3]
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	@ (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fc46 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023c00 	.word	0x40023c00
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08005ea0 	.word	0x08005ea0
 80041d8:	20000000 	.word	0x20000000
 80041dc:	20000004 	.word	0x20000004

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b090      	sub	sp, #64	@ 0x40
 80041e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f8:	4b59      	ldr	r3, [pc, #356]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x180>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b08      	cmp	r3, #8
 8004202:	d00d      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x40>
 8004204:	2b08      	cmp	r3, #8
 8004206:	f200 80a1 	bhi.w	800434c <HAL_RCC_GetSysClockFreq+0x16c>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x34>
 800420e:	2b04      	cmp	r3, #4
 8004210:	d003      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x3a>
 8004212:	e09b      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b53      	ldr	r3, [pc, #332]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x184>)
 8004216:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004218:	e09b      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421a:	4b53      	ldr	r3, [pc, #332]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x188>)
 800421c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800421e:	e098      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004220:	4b4f      	ldr	r3, [pc, #316]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x180>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004228:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422a:	4b4d      	ldr	r3, [pc, #308]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x180>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d028      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x180>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	2200      	movs	r2, #0
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	627a      	str	r2, [r7, #36]	@ 0x24
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004248:	2100      	movs	r1, #0
 800424a:	4b47      	ldr	r3, [pc, #284]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x188>)
 800424c:	fb03 f201 	mul.w	r2, r3, r1
 8004250:	2300      	movs	r3, #0
 8004252:	fb00 f303 	mul.w	r3, r0, r3
 8004256:	4413      	add	r3, r2
 8004258:	4a43      	ldr	r2, [pc, #268]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x188>)
 800425a:	fba0 1202 	umull	r1, r2, r0, r2
 800425e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004260:	460a      	mov	r2, r1
 8004262:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004266:	4413      	add	r3, r2
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800426a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426c:	2200      	movs	r2, #0
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	61fa      	str	r2, [r7, #28]
 8004272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800427a:	f7fc f801 	bl	8000280 <__aeabi_uldivmod>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4613      	mov	r3, r2
 8004284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004286:	e053      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004288:	4b35      	ldr	r3, [pc, #212]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x180>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	2200      	movs	r2, #0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	617a      	str	r2, [r7, #20]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800429a:	f04f 0b00 	mov.w	fp, #0
 800429e:	4652      	mov	r2, sl
 80042a0:	465b      	mov	r3, fp
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	0159      	lsls	r1, r3, #5
 80042ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b0:	0150      	lsls	r0, r2, #5
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	ebb2 080a 	subs.w	r8, r2, sl
 80042ba:	eb63 090b 	sbc.w	r9, r3, fp
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042d2:	ebb2 0408 	subs.w	r4, r2, r8
 80042d6:	eb63 0509 	sbc.w	r5, r3, r9
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	00eb      	lsls	r3, r5, #3
 80042e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e8:	00e2      	lsls	r2, r4, #3
 80042ea:	4614      	mov	r4, r2
 80042ec:	461d      	mov	r5, r3
 80042ee:	eb14 030a 	adds.w	r3, r4, sl
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	eb45 030b 	adc.w	r3, r5, fp
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	2200      	movs	r2, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	60fa      	str	r2, [r7, #12]
 8004320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004324:	f7fb ffac 	bl	8000280 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x180>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004340:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x184>)
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004354:	4618      	mov	r0, r3
 8004356:	3740      	adds	r7, #64	@ 0x40
 8004358:	46bd      	mov	sp, r7
 800435a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	017d7840 	.word	0x017d7840

0800436c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <HAL_RCC_GetHCLKFreq+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000000 	.word	0x20000000

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	@ (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08005eb0 	.word	0x08005eb0

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b0:	f7ff ffdc 	bl	800436c <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0b5b      	lsrs	r3, r3, #13
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	@ (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08005eb0 	.word	0x08005eb0

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e041      	b.n	800446a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd f8be 	bl	800157c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fa7e 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e04e      	b.n	800452a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a23      	ldr	r2, [pc, #140]	@ (8004538 <HAL_TIM_Base_Start_IT+0xc4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d022      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b6:	d01d      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1f      	ldr	r2, [pc, #124]	@ (800453c <HAL_TIM_Base_Start_IT+0xc8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004540 <HAL_TIM_Base_Start_IT+0xcc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <HAL_TIM_Base_Start_IT+0xd0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <HAL_TIM_Base_Start_IT+0xd4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a19      	ldr	r2, [pc, #100]	@ (800454c <HAL_TIM_Base_Start_IT+0xd8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a18      	ldr	r2, [pc, #96]	@ (8004550 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d111      	bne.n	8004518 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d010      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	e007      	b.n	8004528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40010400 	.word	0x40010400
 800454c:	40014000 	.word	0x40014000
 8004550:	40001800 	.word	0x40001800

08004554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d020      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0202 	mvn.w	r2, #2
 8004588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f999 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f98b 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f99c 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d020      	beq.n	8004604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0204 	mvn.w	r2, #4
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f973 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f965 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f976 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d020      	beq.n	8004650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0208 	mvn.w	r2, #8
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2204      	movs	r2, #4
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f94d 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f93f 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f950 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	d020      	beq.n	800469c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0210 	mvn.w	r2, #16
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2208      	movs	r2, #8
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f927 	bl	80048d6 <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f919 	bl	80048c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f92a 	bl	80048ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0201 	mvn.w	r2, #1
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fc9e 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fae4 	bl	8004cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f8fb 	bl	80048fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0220 	mvn.w	r2, #32
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fab6 	bl	8004c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIM_ConfigClockSource+0x1c>
 800474c:	2302      	movs	r3, #2
 800474e:	e0b4      	b.n	80048ba <HAL_TIM_ConfigClockSource+0x186>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800476e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004788:	d03e      	beq.n	8004808 <HAL_TIM_ConfigClockSource+0xd4>
 800478a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478e:	f200 8087 	bhi.w	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004796:	f000 8086 	beq.w	80048a6 <HAL_TIM_ConfigClockSource+0x172>
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479e:	d87f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	2b70      	cmp	r3, #112	@ 0x70
 80047a2:	d01a      	beq.n	80047da <HAL_TIM_ConfigClockSource+0xa6>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d87b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a8:	2b60      	cmp	r3, #96	@ 0x60
 80047aa:	d050      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x11a>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d877      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b50      	cmp	r3, #80	@ 0x50
 80047b2:	d03c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xfa>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d873      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	2b40      	cmp	r3, #64	@ 0x40
 80047ba:	d058      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x13a>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d86f      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c0:	2b30      	cmp	r3, #48	@ 0x30
 80047c2:	d064      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d86b      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d060      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d867      	bhi.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d05a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	e062      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	f000 f9b9 	bl	8004b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	609a      	str	r2, [r3, #8]
      break;
 8004806:	e04f      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	f000 f9a2 	bl	8004b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482a:	609a      	str	r2, [r3, #8]
      break;
 800482c:	e03c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f916 	bl	8004a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2150      	movs	r1, #80	@ 0x50
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f96f 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 800484c:	e02c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f935 	bl	8004aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2160      	movs	r1, #96	@ 0x60
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f95f 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 800486c:	e01c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f8f6 	bl	8004a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2140      	movs	r1, #64	@ 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f94f 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 800488c:	e00c      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 f946 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 800489e:	e003      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a46      	ldr	r2, [pc, #280]	@ (8004a40 <TIM_Base_SetConfig+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a43      	ldr	r2, [pc, #268]	@ (8004a44 <TIM_Base_SetConfig+0x130>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a42      	ldr	r2, [pc, #264]	@ (8004a48 <TIM_Base_SetConfig+0x134>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a41      	ldr	r2, [pc, #260]	@ (8004a4c <TIM_Base_SetConfig+0x138>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a40      	ldr	r2, [pc, #256]	@ (8004a50 <TIM_Base_SetConfig+0x13c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a35      	ldr	r2, [pc, #212]	@ (8004a40 <TIM_Base_SetConfig+0x12c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004974:	d027      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <TIM_Base_SetConfig+0x130>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d023      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a31      	ldr	r2, [pc, #196]	@ (8004a48 <TIM_Base_SetConfig+0x134>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a30      	ldr	r2, [pc, #192]	@ (8004a4c <TIM_Base_SetConfig+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2f      	ldr	r2, [pc, #188]	@ (8004a50 <TIM_Base_SetConfig+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2e      	ldr	r2, [pc, #184]	@ (8004a54 <TIM_Base_SetConfig+0x140>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a58 <TIM_Base_SetConfig+0x144>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a5c <TIM_Base_SetConfig+0x148>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <TIM_Base_SetConfig+0x14c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a64 <TIM_Base_SetConfig+0x150>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a29      	ldr	r2, [pc, #164]	@ (8004a68 <TIM_Base_SetConfig+0x154>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a10      	ldr	r2, [pc, #64]	@ (8004a40 <TIM_Base_SetConfig+0x12c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <TIM_Base_SetConfig+0x13c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]
  }
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40001800 	.word	0x40001800
 8004a64:	40001c00 	.word	0x40001c00
 8004a68:	40002000 	.word	0x40002000

08004a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 030a 	bic.w	r3, r3, #10
 8004aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0210 	bic.w	r2, r3, #16
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	031b      	lsls	r3, r3, #12
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f043 0307 	orr.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	609a      	str	r2, [r3, #8]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e05a      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a21      	ldr	r2, [pc, #132]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d022      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c04:	d01d      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40001800 	.word	0x40001800

08004c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e042      	b.n	8004d58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc fcc0 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2224      	movs	r2, #36	@ 0x24
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f973 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d175      	bne.n	8004e6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_UART_Transmit+0x2c>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e06e      	b.n	8004e6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2221      	movs	r2, #33	@ 0x21
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d9e:	f7fc fe99 	bl	8001ad4 <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	88fa      	ldrh	r2, [r7, #6]
 8004dae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db8:	d108      	bne.n	8004dcc <HAL_UART_Transmit+0x6c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	e003      	b.n	8004dd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dd4:	e02e      	b.n	8004e34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2180      	movs	r1, #128	@ 0x80
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f848 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e03a      	b.n	8004e6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	3302      	adds	r3, #2
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e007      	b.n	8004e26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1cb      	bne.n	8004dd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2140      	movs	r1, #64	@ 0x40
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f814 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	e03b      	b.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d037      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e90:	f7fc fe20 	bl	8001ad4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d302      	bcc.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e03a      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d023      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b80      	cmp	r3, #128	@ 0x80
 8004ebc:	d020      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d01d      	beq.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d116      	bne.n	8004f00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f81d 	bl	8004f28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e00f      	b.n	8004f20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d0b4      	beq.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b095      	sub	sp, #84	@ 0x54
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f50:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e5      	bne.n	8004f30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d119      	bne.n	8004fd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc0:	61ba      	str	r2, [r7, #24]
 8004fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6979      	ldr	r1, [r7, #20]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fe2:	bf00      	nop
 8004fe4:	3754      	adds	r7, #84	@ 0x54
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	@ 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8f      	ldr	r3, [pc, #572]	@ (80052bc <UART_SetConfig+0x2cc>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8d      	ldr	r3, [pc, #564]	@ (80052c0 <UART_SetConfig+0x2d0>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7ff f98c 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7ff f973 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ac:	f040 810c 	bne.w	80052c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050d2:	4621      	mov	r1, r4
 80050d4:	eb12 0801 	adds.w	r8, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0901 	adc.w	r9, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f2:	4690      	mov	r8, r2
 80050f4:	4699      	mov	r9, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb18 0303 	adds.w	r3, r8, r3
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005100:	462b      	mov	r3, r5
 8005102:	eb49 0303 	adc.w	r3, r9, r3
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	18db      	adds	r3, r3, r3
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
 8005124:	4613      	mov	r3, r2
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	657b      	str	r3, [r7, #84]	@ 0x54
 800512c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005134:	f7fb f8a4 	bl	8000280 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b61      	ldr	r3, [pc, #388]	@ (80052c4 <UART_SetConfig+0x2d4>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005150:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005160:	415b      	adcs	r3, r3
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005168:	4641      	mov	r1, r8
 800516a:	eb12 0a01 	adds.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0b01 	adc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	4692      	mov	sl, r2
 800518a:	469b      	mov	fp, r3
 800518c:	4643      	mov	r3, r8
 800518e:	eb1a 0303 	adds.w	r3, sl, r3
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005196:	464b      	mov	r3, r9
 8005198:	eb4b 0303 	adc.w	r3, fp, r3
 800519c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ca:	f7fb f859 	bl	8000280 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b3b      	ldr	r3, [pc, #236]	@ (80052c4 <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	@ 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051ea:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <UART_SetConfig+0x2d4>)
 80051ec:	fba3 2302 	umull	r2, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005204:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005214:	415b      	adcs	r3, r3
 8005216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6339      	str	r1, [r7, #48]	@ 0x30
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005268:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800526c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005270:	460b      	mov	r3, r1
 8005272:	18db      	adds	r3, r3, r3
 8005274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005276:	4613      	mov	r3, r2
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800527e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005286:	f7fa fffb 	bl	8000280 <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <UART_SetConfig+0x2d4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	@ 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3332      	adds	r3, #50	@ 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <UART_SetConfig+0x2d4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0207 	and.w	r2, r3, #7
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b8:	e106      	b.n	80054c8 <UART_SetConfig+0x4d8>
 80052ba:	bf00      	nop
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	6239      	str	r1, [r7, #32]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb43 0501 	adc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005310:	464b      	mov	r3, r9
 8005312:	eb45 0303 	adc.w	r3, r5, r3
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005336:	4629      	mov	r1, r5
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005340:	4621      	mov	r1, r4
 8005342:	008a      	lsls	r2, r1, #2
 8005344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005348:	f7fa ff9a 	bl	8000280 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b60      	ldr	r3, [pc, #384]	@ (80054d4 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005364:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	61b9      	str	r1, [r7, #24]
 8005374:	415b      	adcs	r3, r3
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6139      	str	r1, [r7, #16]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053d4:	4649      	mov	r1, r9
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	4641      	mov	r1, r8
 80053da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053de:	4641      	mov	r1, r8
 80053e0:	008a      	lsls	r2, r1, #2
 80053e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053e6:	f7fa ff4b 	bl	8000280 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	4b38      	ldr	r3, [pc, #224]	@ (80054d4 <UART_SetConfig+0x4e4>)
 80053f2:	fba3 2301 	umull	r2, r3, r3, r1
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2264      	movs	r2, #100	@ 0x64
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	1acb      	subs	r3, r1, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	@ 0x32
 8005404:	4a33      	ldr	r2, [pc, #204]	@ (80054d4 <UART_SetConfig+0x4e4>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005410:	441c      	add	r4, r3
 8005412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005416:	2200      	movs	r2, #0
 8005418:	673b      	str	r3, [r7, #112]	@ 0x70
 800541a:	677a      	str	r2, [r7, #116]	@ 0x74
 800541c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	1891      	adds	r1, r2, r2
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	415b      	adcs	r3, r3
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005430:	4641      	mov	r1, r8
 8005432:	1851      	adds	r1, r2, r1
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	4649      	mov	r1, r9
 8005438:	414b      	adcs	r3, r1
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005448:	4659      	mov	r1, fp
 800544a:	00cb      	lsls	r3, r1, #3
 800544c:	4651      	mov	r1, sl
 800544e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005452:	4651      	mov	r1, sl
 8005454:	00ca      	lsls	r2, r1, #3
 8005456:	4610      	mov	r0, r2
 8005458:	4619      	mov	r1, r3
 800545a:	4603      	mov	r3, r0
 800545c:	4642      	mov	r2, r8
 800545e:	189b      	adds	r3, r3, r2
 8005460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005462:	464b      	mov	r3, r9
 8005464:	460a      	mov	r2, r1
 8005466:	eb42 0303 	adc.w	r3, r2, r3
 800546a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	663b      	str	r3, [r7, #96]	@ 0x60
 8005476:	667a      	str	r2, [r7, #100]	@ 0x64
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005484:	4649      	mov	r1, r9
 8005486:	008b      	lsls	r3, r1, #2
 8005488:	4641      	mov	r1, r8
 800548a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548e:	4641      	mov	r1, r8
 8005490:	008a      	lsls	r2, r1, #2
 8005492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005496:	f7fa fef3 	bl	8000280 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <UART_SetConfig+0x4e4>)
 80054a0:	fba3 1302 	umull	r1, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	2164      	movs	r1, #100	@ 0x64
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	3332      	adds	r3, #50	@ 0x32
 80054b2:	4a08      	ldr	r2, [pc, #32]	@ (80054d4 <UART_SetConfig+0x4e4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 020f 	and.w	r2, r3, #15
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4422      	add	r2, r4
 80054c6:	609a      	str	r2, [r3, #8]
}
 80054c8:	bf00      	nop
 80054ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054ce:	46bd      	mov	sp, r7
 80054d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <sniprintf>:
 80054d8:	b40c      	push	{r2, r3}
 80054da:	b530      	push	{r4, r5, lr}
 80054dc:	4b17      	ldr	r3, [pc, #92]	@ (800553c <sniprintf+0x64>)
 80054de:	1e0c      	subs	r4, r1, #0
 80054e0:	681d      	ldr	r5, [r3, #0]
 80054e2:	b09d      	sub	sp, #116	@ 0x74
 80054e4:	da08      	bge.n	80054f8 <sniprintf+0x20>
 80054e6:	238b      	movs	r3, #139	@ 0x8b
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	b01d      	add	sp, #116	@ 0x74
 80054f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f4:	b002      	add	sp, #8
 80054f6:	4770      	bx	lr
 80054f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80054fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005500:	bf14      	ite	ne
 8005502:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005506:	4623      	moveq	r3, r4
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	9006      	str	r0, [sp, #24]
 8005514:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005518:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800551a:	ab21      	add	r3, sp, #132	@ 0x84
 800551c:	a902      	add	r1, sp, #8
 800551e:	4628      	mov	r0, r5
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	f000 f995 	bl	8005850 <_svfiprintf_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	bfbc      	itt	lt
 800552a:	238b      	movlt	r3, #139	@ 0x8b
 800552c:	602b      	strlt	r3, [r5, #0]
 800552e:	2c00      	cmp	r4, #0
 8005530:	d0dd      	beq.n	80054ee <sniprintf+0x16>
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e7d9      	b.n	80054ee <sniprintf+0x16>
 800553a:	bf00      	nop
 800553c:	2000000c 	.word	0x2000000c

08005540 <memset>:
 8005540:	4402      	add	r2, r0
 8005542:	4603      	mov	r3, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	@ (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	2000000c 	.word	0x2000000c

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	@ (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	@ (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	@ (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	@ (80055a0 <__libc_init_array+0x44>)
 8005570:	f000 fc66 	bl	8005e40 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08005efc 	.word	0x08005efc
 8005598:	08005efc 	.word	0x08005efc
 800559c:	08005efc 	.word	0x08005efc
 80055a0:	08005f00 	.word	0x08005f00

080055a4 <__retarget_lock_acquire_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_release_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <_free_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4605      	mov	r5, r0
 80055ac:	2900      	cmp	r1, #0
 80055ae:	d041      	beq.n	8005634 <_free_r+0x8c>
 80055b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b4:	1f0c      	subs	r4, r1, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bfb8      	it	lt
 80055ba:	18e4      	addlt	r4, r4, r3
 80055bc:	f000 f8e0 	bl	8005780 <__malloc_lock>
 80055c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005638 <_free_r+0x90>)
 80055c2:	6813      	ldr	r3, [r2, #0]
 80055c4:	b933      	cbnz	r3, 80055d4 <_free_r+0x2c>
 80055c6:	6063      	str	r3, [r4, #4]
 80055c8:	6014      	str	r4, [r2, #0]
 80055ca:	4628      	mov	r0, r5
 80055cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d0:	f000 b8dc 	b.w	800578c <__malloc_unlock>
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	d908      	bls.n	80055ea <_free_r+0x42>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	1821      	adds	r1, r4, r0
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf01      	itttt	eq
 80055e0:	6819      	ldreq	r1, [r3, #0]
 80055e2:	685b      	ldreq	r3, [r3, #4]
 80055e4:	1809      	addeq	r1, r1, r0
 80055e6:	6021      	streq	r1, [r4, #0]
 80055e8:	e7ed      	b.n	80055c6 <_free_r+0x1e>
 80055ea:	461a      	mov	r2, r3
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b10b      	cbz	r3, 80055f4 <_free_r+0x4c>
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	d9fa      	bls.n	80055ea <_free_r+0x42>
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	1850      	adds	r0, r2, r1
 80055f8:	42a0      	cmp	r0, r4
 80055fa:	d10b      	bne.n	8005614 <_free_r+0x6c>
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	4401      	add	r1, r0
 8005600:	1850      	adds	r0, r2, r1
 8005602:	4283      	cmp	r3, r0
 8005604:	6011      	str	r1, [r2, #0]
 8005606:	d1e0      	bne.n	80055ca <_free_r+0x22>
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	6053      	str	r3, [r2, #4]
 800560e:	4408      	add	r0, r1
 8005610:	6010      	str	r0, [r2, #0]
 8005612:	e7da      	b.n	80055ca <_free_r+0x22>
 8005614:	d902      	bls.n	800561c <_free_r+0x74>
 8005616:	230c      	movs	r3, #12
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	e7d6      	b.n	80055ca <_free_r+0x22>
 800561c:	6820      	ldr	r0, [r4, #0]
 800561e:	1821      	adds	r1, r4, r0
 8005620:	428b      	cmp	r3, r1
 8005622:	bf04      	itt	eq
 8005624:	6819      	ldreq	r1, [r3, #0]
 8005626:	685b      	ldreq	r3, [r3, #4]
 8005628:	6063      	str	r3, [r4, #4]
 800562a:	bf04      	itt	eq
 800562c:	1809      	addeq	r1, r1, r0
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	6054      	str	r4, [r2, #4]
 8005632:	e7ca      	b.n	80055ca <_free_r+0x22>
 8005634:	bd38      	pop	{r3, r4, r5, pc}
 8005636:	bf00      	nop
 8005638:	200005d8 	.word	0x200005d8

0800563c <sbrk_aligned>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4e0f      	ldr	r6, [pc, #60]	@ (800567c <sbrk_aligned+0x40>)
 8005640:	460c      	mov	r4, r1
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	4605      	mov	r5, r0
 8005646:	b911      	cbnz	r1, 800564e <sbrk_aligned+0x12>
 8005648:	f000 fba6 	bl	8005d98 <_sbrk_r>
 800564c:	6030      	str	r0, [r6, #0]
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f000 fba1 	bl	8005d98 <_sbrk_r>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	d103      	bne.n	8005662 <sbrk_aligned+0x26>
 800565a:	f04f 34ff 	mov.w	r4, #4294967295
 800565e:	4620      	mov	r0, r4
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	1cc4      	adds	r4, r0, #3
 8005664:	f024 0403 	bic.w	r4, r4, #3
 8005668:	42a0      	cmp	r0, r4
 800566a:	d0f8      	beq.n	800565e <sbrk_aligned+0x22>
 800566c:	1a21      	subs	r1, r4, r0
 800566e:	4628      	mov	r0, r5
 8005670:	f000 fb92 	bl	8005d98 <_sbrk_r>
 8005674:	3001      	adds	r0, #1
 8005676:	d1f2      	bne.n	800565e <sbrk_aligned+0x22>
 8005678:	e7ef      	b.n	800565a <sbrk_aligned+0x1e>
 800567a:	bf00      	nop
 800567c:	200005d4 	.word	0x200005d4

08005680 <_malloc_r>:
 8005680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005684:	1ccd      	adds	r5, r1, #3
 8005686:	f025 0503 	bic.w	r5, r5, #3
 800568a:	3508      	adds	r5, #8
 800568c:	2d0c      	cmp	r5, #12
 800568e:	bf38      	it	cc
 8005690:	250c      	movcc	r5, #12
 8005692:	2d00      	cmp	r5, #0
 8005694:	4606      	mov	r6, r0
 8005696:	db01      	blt.n	800569c <_malloc_r+0x1c>
 8005698:	42a9      	cmp	r1, r5
 800569a:	d904      	bls.n	80056a6 <_malloc_r+0x26>
 800569c:	230c      	movs	r3, #12
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	2000      	movs	r0, #0
 80056a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800577c <_malloc_r+0xfc>
 80056aa:	f000 f869 	bl	8005780 <__malloc_lock>
 80056ae:	f8d8 3000 	ldr.w	r3, [r8]
 80056b2:	461c      	mov	r4, r3
 80056b4:	bb44      	cbnz	r4, 8005708 <_malloc_r+0x88>
 80056b6:	4629      	mov	r1, r5
 80056b8:	4630      	mov	r0, r6
 80056ba:	f7ff ffbf 	bl	800563c <sbrk_aligned>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	4604      	mov	r4, r0
 80056c2:	d158      	bne.n	8005776 <_malloc_r+0xf6>
 80056c4:	f8d8 4000 	ldr.w	r4, [r8]
 80056c8:	4627      	mov	r7, r4
 80056ca:	2f00      	cmp	r7, #0
 80056cc:	d143      	bne.n	8005756 <_malloc_r+0xd6>
 80056ce:	2c00      	cmp	r4, #0
 80056d0:	d04b      	beq.n	800576a <_malloc_r+0xea>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	4639      	mov	r1, r7
 80056d6:	4630      	mov	r0, r6
 80056d8:	eb04 0903 	add.w	r9, r4, r3
 80056dc:	f000 fb5c 	bl	8005d98 <_sbrk_r>
 80056e0:	4581      	cmp	r9, r0
 80056e2:	d142      	bne.n	800576a <_malloc_r+0xea>
 80056e4:	6821      	ldr	r1, [r4, #0]
 80056e6:	1a6d      	subs	r5, r5, r1
 80056e8:	4629      	mov	r1, r5
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7ff ffa6 	bl	800563c <sbrk_aligned>
 80056f0:	3001      	adds	r0, #1
 80056f2:	d03a      	beq.n	800576a <_malloc_r+0xea>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	442b      	add	r3, r5
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	f8d8 3000 	ldr.w	r3, [r8]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	bb62      	cbnz	r2, 800575c <_malloc_r+0xdc>
 8005702:	f8c8 7000 	str.w	r7, [r8]
 8005706:	e00f      	b.n	8005728 <_malloc_r+0xa8>
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	1b52      	subs	r2, r2, r5
 800570c:	d420      	bmi.n	8005750 <_malloc_r+0xd0>
 800570e:	2a0b      	cmp	r2, #11
 8005710:	d917      	bls.n	8005742 <_malloc_r+0xc2>
 8005712:	1961      	adds	r1, r4, r5
 8005714:	42a3      	cmp	r3, r4
 8005716:	6025      	str	r5, [r4, #0]
 8005718:	bf18      	it	ne
 800571a:	6059      	strne	r1, [r3, #4]
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	bf08      	it	eq
 8005720:	f8c8 1000 	streq.w	r1, [r8]
 8005724:	5162      	str	r2, [r4, r5]
 8005726:	604b      	str	r3, [r1, #4]
 8005728:	4630      	mov	r0, r6
 800572a:	f000 f82f 	bl	800578c <__malloc_unlock>
 800572e:	f104 000b 	add.w	r0, r4, #11
 8005732:	1d23      	adds	r3, r4, #4
 8005734:	f020 0007 	bic.w	r0, r0, #7
 8005738:	1ac2      	subs	r2, r0, r3
 800573a:	bf1c      	itt	ne
 800573c:	1a1b      	subne	r3, r3, r0
 800573e:	50a3      	strne	r3, [r4, r2]
 8005740:	e7af      	b.n	80056a2 <_malloc_r+0x22>
 8005742:	6862      	ldr	r2, [r4, #4]
 8005744:	42a3      	cmp	r3, r4
 8005746:	bf0c      	ite	eq
 8005748:	f8c8 2000 	streq.w	r2, [r8]
 800574c:	605a      	strne	r2, [r3, #4]
 800574e:	e7eb      	b.n	8005728 <_malloc_r+0xa8>
 8005750:	4623      	mov	r3, r4
 8005752:	6864      	ldr	r4, [r4, #4]
 8005754:	e7ae      	b.n	80056b4 <_malloc_r+0x34>
 8005756:	463c      	mov	r4, r7
 8005758:	687f      	ldr	r7, [r7, #4]
 800575a:	e7b6      	b.n	80056ca <_malloc_r+0x4a>
 800575c:	461a      	mov	r2, r3
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	42a3      	cmp	r3, r4
 8005762:	d1fb      	bne.n	800575c <_malloc_r+0xdc>
 8005764:	2300      	movs	r3, #0
 8005766:	6053      	str	r3, [r2, #4]
 8005768:	e7de      	b.n	8005728 <_malloc_r+0xa8>
 800576a:	230c      	movs	r3, #12
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	4630      	mov	r0, r6
 8005770:	f000 f80c 	bl	800578c <__malloc_unlock>
 8005774:	e794      	b.n	80056a0 <_malloc_r+0x20>
 8005776:	6005      	str	r5, [r0, #0]
 8005778:	e7d6      	b.n	8005728 <_malloc_r+0xa8>
 800577a:	bf00      	nop
 800577c:	200005d8 	.word	0x200005d8

08005780 <__malloc_lock>:
 8005780:	4801      	ldr	r0, [pc, #4]	@ (8005788 <__malloc_lock+0x8>)
 8005782:	f7ff bf0f 	b.w	80055a4 <__retarget_lock_acquire_recursive>
 8005786:	bf00      	nop
 8005788:	200005d0 	.word	0x200005d0

0800578c <__malloc_unlock>:
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <__malloc_unlock+0x8>)
 800578e:	f7ff bf0a 	b.w	80055a6 <__retarget_lock_release_recursive>
 8005792:	bf00      	nop
 8005794:	200005d0 	.word	0x200005d0

08005798 <__ssputs_r>:
 8005798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800579c:	688e      	ldr	r6, [r1, #8]
 800579e:	461f      	mov	r7, r3
 80057a0:	42be      	cmp	r6, r7
 80057a2:	680b      	ldr	r3, [r1, #0]
 80057a4:	4682      	mov	sl, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	4690      	mov	r8, r2
 80057aa:	d82d      	bhi.n	8005808 <__ssputs_r+0x70>
 80057ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057b4:	d026      	beq.n	8005804 <__ssputs_r+0x6c>
 80057b6:	6965      	ldr	r5, [r4, #20]
 80057b8:	6909      	ldr	r1, [r1, #16]
 80057ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057be:	eba3 0901 	sub.w	r9, r3, r1
 80057c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057c6:	1c7b      	adds	r3, r7, #1
 80057c8:	444b      	add	r3, r9
 80057ca:	106d      	asrs	r5, r5, #1
 80057cc:	429d      	cmp	r5, r3
 80057ce:	bf38      	it	cc
 80057d0:	461d      	movcc	r5, r3
 80057d2:	0553      	lsls	r3, r2, #21
 80057d4:	d527      	bpl.n	8005826 <__ssputs_r+0x8e>
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7ff ff52 	bl	8005680 <_malloc_r>
 80057dc:	4606      	mov	r6, r0
 80057de:	b360      	cbz	r0, 800583a <__ssputs_r+0xa2>
 80057e0:	6921      	ldr	r1, [r4, #16]
 80057e2:	464a      	mov	r2, r9
 80057e4:	f000 fae8 	bl	8005db8 <memcpy>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	6126      	str	r6, [r4, #16]
 80057f6:	6165      	str	r5, [r4, #20]
 80057f8:	444e      	add	r6, r9
 80057fa:	eba5 0509 	sub.w	r5, r5, r9
 80057fe:	6026      	str	r6, [r4, #0]
 8005800:	60a5      	str	r5, [r4, #8]
 8005802:	463e      	mov	r6, r7
 8005804:	42be      	cmp	r6, r7
 8005806:	d900      	bls.n	800580a <__ssputs_r+0x72>
 8005808:	463e      	mov	r6, r7
 800580a:	6820      	ldr	r0, [r4, #0]
 800580c:	4632      	mov	r2, r6
 800580e:	4641      	mov	r1, r8
 8005810:	f000 faa8 	bl	8005d64 <memmove>
 8005814:	68a3      	ldr	r3, [r4, #8]
 8005816:	1b9b      	subs	r3, r3, r6
 8005818:	60a3      	str	r3, [r4, #8]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	4433      	add	r3, r6
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2000      	movs	r0, #0
 8005822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005826:	462a      	mov	r2, r5
 8005828:	f000 fad4 	bl	8005dd4 <_realloc_r>
 800582c:	4606      	mov	r6, r0
 800582e:	2800      	cmp	r0, #0
 8005830:	d1e0      	bne.n	80057f4 <__ssputs_r+0x5c>
 8005832:	6921      	ldr	r1, [r4, #16]
 8005834:	4650      	mov	r0, sl
 8005836:	f7ff feb7 	bl	80055a8 <_free_r>
 800583a:	230c      	movs	r3, #12
 800583c:	f8ca 3000 	str.w	r3, [sl]
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	e7e9      	b.n	8005822 <__ssputs_r+0x8a>
	...

08005850 <_svfiprintf_r>:
 8005850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005854:	4698      	mov	r8, r3
 8005856:	898b      	ldrh	r3, [r1, #12]
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	b09d      	sub	sp, #116	@ 0x74
 800585c:	4607      	mov	r7, r0
 800585e:	460d      	mov	r5, r1
 8005860:	4614      	mov	r4, r2
 8005862:	d510      	bpl.n	8005886 <_svfiprintf_r+0x36>
 8005864:	690b      	ldr	r3, [r1, #16]
 8005866:	b973      	cbnz	r3, 8005886 <_svfiprintf_r+0x36>
 8005868:	2140      	movs	r1, #64	@ 0x40
 800586a:	f7ff ff09 	bl	8005680 <_malloc_r>
 800586e:	6028      	str	r0, [r5, #0]
 8005870:	6128      	str	r0, [r5, #16]
 8005872:	b930      	cbnz	r0, 8005882 <_svfiprintf_r+0x32>
 8005874:	230c      	movs	r3, #12
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	b01d      	add	sp, #116	@ 0x74
 800587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005882:	2340      	movs	r3, #64	@ 0x40
 8005884:	616b      	str	r3, [r5, #20]
 8005886:	2300      	movs	r3, #0
 8005888:	9309      	str	r3, [sp, #36]	@ 0x24
 800588a:	2320      	movs	r3, #32
 800588c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005890:	f8cd 800c 	str.w	r8, [sp, #12]
 8005894:	2330      	movs	r3, #48	@ 0x30
 8005896:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a34 <_svfiprintf_r+0x1e4>
 800589a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800589e:	f04f 0901 	mov.w	r9, #1
 80058a2:	4623      	mov	r3, r4
 80058a4:	469a      	mov	sl, r3
 80058a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058aa:	b10a      	cbz	r2, 80058b0 <_svfiprintf_r+0x60>
 80058ac:	2a25      	cmp	r2, #37	@ 0x25
 80058ae:	d1f9      	bne.n	80058a4 <_svfiprintf_r+0x54>
 80058b0:	ebba 0b04 	subs.w	fp, sl, r4
 80058b4:	d00b      	beq.n	80058ce <_svfiprintf_r+0x7e>
 80058b6:	465b      	mov	r3, fp
 80058b8:	4622      	mov	r2, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	4638      	mov	r0, r7
 80058be:	f7ff ff6b 	bl	8005798 <__ssputs_r>
 80058c2:	3001      	adds	r0, #1
 80058c4:	f000 80a7 	beq.w	8005a16 <_svfiprintf_r+0x1c6>
 80058c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058ca:	445a      	add	r2, fp
 80058cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ce:	f89a 3000 	ldrb.w	r3, [sl]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 809f 	beq.w	8005a16 <_svfiprintf_r+0x1c6>
 80058d8:	2300      	movs	r3, #0
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e2:	f10a 0a01 	add.w	sl, sl, #1
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	9307      	str	r3, [sp, #28]
 80058ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80058f0:	4654      	mov	r4, sl
 80058f2:	2205      	movs	r2, #5
 80058f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f8:	484e      	ldr	r0, [pc, #312]	@ (8005a34 <_svfiprintf_r+0x1e4>)
 80058fa:	f7fa fc71 	bl	80001e0 <memchr>
 80058fe:	9a04      	ldr	r2, [sp, #16]
 8005900:	b9d8      	cbnz	r0, 800593a <_svfiprintf_r+0xea>
 8005902:	06d0      	lsls	r0, r2, #27
 8005904:	bf44      	itt	mi
 8005906:	2320      	movmi	r3, #32
 8005908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800590c:	0711      	lsls	r1, r2, #28
 800590e:	bf44      	itt	mi
 8005910:	232b      	movmi	r3, #43	@ 0x2b
 8005912:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b2a      	cmp	r3, #42	@ 0x2a
 800591c:	d015      	beq.n	800594a <_svfiprintf_r+0xfa>
 800591e:	9a07      	ldr	r2, [sp, #28]
 8005920:	4654      	mov	r4, sl
 8005922:	2000      	movs	r0, #0
 8005924:	f04f 0c0a 	mov.w	ip, #10
 8005928:	4621      	mov	r1, r4
 800592a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592e:	3b30      	subs	r3, #48	@ 0x30
 8005930:	2b09      	cmp	r3, #9
 8005932:	d94b      	bls.n	80059cc <_svfiprintf_r+0x17c>
 8005934:	b1b0      	cbz	r0, 8005964 <_svfiprintf_r+0x114>
 8005936:	9207      	str	r2, [sp, #28]
 8005938:	e014      	b.n	8005964 <_svfiprintf_r+0x114>
 800593a:	eba0 0308 	sub.w	r3, r0, r8
 800593e:	fa09 f303 	lsl.w	r3, r9, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	46a2      	mov	sl, r4
 8005948:	e7d2      	b.n	80058f0 <_svfiprintf_r+0xa0>
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	1d19      	adds	r1, r3, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	9103      	str	r1, [sp, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfbb      	ittet	lt
 8005956:	425b      	neglt	r3, r3
 8005958:	f042 0202 	orrlt.w	r2, r2, #2
 800595c:	9307      	strge	r3, [sp, #28]
 800595e:	9307      	strlt	r3, [sp, #28]
 8005960:	bfb8      	it	lt
 8005962:	9204      	strlt	r2, [sp, #16]
 8005964:	7823      	ldrb	r3, [r4, #0]
 8005966:	2b2e      	cmp	r3, #46	@ 0x2e
 8005968:	d10a      	bne.n	8005980 <_svfiprintf_r+0x130>
 800596a:	7863      	ldrb	r3, [r4, #1]
 800596c:	2b2a      	cmp	r3, #42	@ 0x2a
 800596e:	d132      	bne.n	80059d6 <_svfiprintf_r+0x186>
 8005970:	9b03      	ldr	r3, [sp, #12]
 8005972:	1d1a      	adds	r2, r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	9203      	str	r2, [sp, #12]
 8005978:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800597c:	3402      	adds	r4, #2
 800597e:	9305      	str	r3, [sp, #20]
 8005980:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a44 <_svfiprintf_r+0x1f4>
 8005984:	7821      	ldrb	r1, [r4, #0]
 8005986:	2203      	movs	r2, #3
 8005988:	4650      	mov	r0, sl
 800598a:	f7fa fc29 	bl	80001e0 <memchr>
 800598e:	b138      	cbz	r0, 80059a0 <_svfiprintf_r+0x150>
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	eba0 000a 	sub.w	r0, r0, sl
 8005996:	2240      	movs	r2, #64	@ 0x40
 8005998:	4082      	lsls	r2, r0
 800599a:	4313      	orrs	r3, r2
 800599c:	3401      	adds	r4, #1
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a4:	4824      	ldr	r0, [pc, #144]	@ (8005a38 <_svfiprintf_r+0x1e8>)
 80059a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059aa:	2206      	movs	r2, #6
 80059ac:	f7fa fc18 	bl	80001e0 <memchr>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d036      	beq.n	8005a22 <_svfiprintf_r+0x1d2>
 80059b4:	4b21      	ldr	r3, [pc, #132]	@ (8005a3c <_svfiprintf_r+0x1ec>)
 80059b6:	bb1b      	cbnz	r3, 8005a00 <_svfiprintf_r+0x1b0>
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	3307      	adds	r3, #7
 80059bc:	f023 0307 	bic.w	r3, r3, #7
 80059c0:	3308      	adds	r3, #8
 80059c2:	9303      	str	r3, [sp, #12]
 80059c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c6:	4433      	add	r3, r6
 80059c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ca:	e76a      	b.n	80058a2 <_svfiprintf_r+0x52>
 80059cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d0:	460c      	mov	r4, r1
 80059d2:	2001      	movs	r0, #1
 80059d4:	e7a8      	b.n	8005928 <_svfiprintf_r+0xd8>
 80059d6:	2300      	movs	r3, #0
 80059d8:	3401      	adds	r4, #1
 80059da:	9305      	str	r3, [sp, #20]
 80059dc:	4619      	mov	r1, r3
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	4620      	mov	r0, r4
 80059e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e8:	3a30      	subs	r2, #48	@ 0x30
 80059ea:	2a09      	cmp	r2, #9
 80059ec:	d903      	bls.n	80059f6 <_svfiprintf_r+0x1a6>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0c6      	beq.n	8005980 <_svfiprintf_r+0x130>
 80059f2:	9105      	str	r1, [sp, #20]
 80059f4:	e7c4      	b.n	8005980 <_svfiprintf_r+0x130>
 80059f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059fa:	4604      	mov	r4, r0
 80059fc:	2301      	movs	r3, #1
 80059fe:	e7f0      	b.n	80059e2 <_svfiprintf_r+0x192>
 8005a00:	ab03      	add	r3, sp, #12
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	462a      	mov	r2, r5
 8005a06:	4b0e      	ldr	r3, [pc, #56]	@ (8005a40 <_svfiprintf_r+0x1f0>)
 8005a08:	a904      	add	r1, sp, #16
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	f3af 8000 	nop.w
 8005a10:	1c42      	adds	r2, r0, #1
 8005a12:	4606      	mov	r6, r0
 8005a14:	d1d6      	bne.n	80059c4 <_svfiprintf_r+0x174>
 8005a16:	89ab      	ldrh	r3, [r5, #12]
 8005a18:	065b      	lsls	r3, r3, #25
 8005a1a:	f53f af2d 	bmi.w	8005878 <_svfiprintf_r+0x28>
 8005a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a20:	e72c      	b.n	800587c <_svfiprintf_r+0x2c>
 8005a22:	ab03      	add	r3, sp, #12
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	462a      	mov	r2, r5
 8005a28:	4b05      	ldr	r3, [pc, #20]	@ (8005a40 <_svfiprintf_r+0x1f0>)
 8005a2a:	a904      	add	r1, sp, #16
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	f000 f879 	bl	8005b24 <_printf_i>
 8005a32:	e7ed      	b.n	8005a10 <_svfiprintf_r+0x1c0>
 8005a34:	08005ec0 	.word	0x08005ec0
 8005a38:	08005eca 	.word	0x08005eca
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	08005799 	.word	0x08005799
 8005a44:	08005ec6 	.word	0x08005ec6

08005a48 <_printf_common>:
 8005a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	4698      	mov	r8, r3
 8005a50:	688a      	ldr	r2, [r1, #8]
 8005a52:	690b      	ldr	r3, [r1, #16]
 8005a54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bfb8      	it	lt
 8005a5c:	4613      	movlt	r3, r2
 8005a5e:	6033      	str	r3, [r6, #0]
 8005a60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a64:	4607      	mov	r7, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	b10a      	cbz	r2, 8005a6e <_printf_common+0x26>
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	0699      	lsls	r1, r3, #26
 8005a72:	bf42      	ittt	mi
 8005a74:	6833      	ldrmi	r3, [r6, #0]
 8005a76:	3302      	addmi	r3, #2
 8005a78:	6033      	strmi	r3, [r6, #0]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	f015 0506 	ands.w	r5, r5, #6
 8005a80:	d106      	bne.n	8005a90 <_printf_common+0x48>
 8005a82:	f104 0a19 	add.w	sl, r4, #25
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	6832      	ldr	r2, [r6, #0]
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	dc26      	bgt.n	8005ade <_printf_common+0x96>
 8005a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	3b00      	subs	r3, #0
 8005a98:	bf18      	it	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	0692      	lsls	r2, r2, #26
 8005a9e:	d42b      	bmi.n	8005af8 <_printf_common+0xb0>
 8005aa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	47c8      	blx	r9
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d01e      	beq.n	8005aec <_printf_common+0xa4>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	6922      	ldr	r2, [r4, #16]
 8005ab2:	f003 0306 	and.w	r3, r3, #6
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	bf02      	ittt	eq
 8005aba:	68e5      	ldreq	r5, [r4, #12]
 8005abc:	6833      	ldreq	r3, [r6, #0]
 8005abe:	1aed      	subeq	r5, r5, r3
 8005ac0:	68a3      	ldr	r3, [r4, #8]
 8005ac2:	bf0c      	ite	eq
 8005ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac8:	2500      	movne	r5, #0
 8005aca:	4293      	cmp	r3, r2
 8005acc:	bfc4      	itt	gt
 8005ace:	1a9b      	subgt	r3, r3, r2
 8005ad0:	18ed      	addgt	r5, r5, r3
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	341a      	adds	r4, #26
 8005ad6:	42b5      	cmp	r5, r6
 8005ad8:	d11a      	bne.n	8005b10 <_printf_common+0xc8>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e008      	b.n	8005af0 <_printf_common+0xa8>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	47c8      	blx	r9
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d103      	bne.n	8005af4 <_printf_common+0xac>
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af4:	3501      	adds	r5, #1
 8005af6:	e7c6      	b.n	8005a86 <_printf_common+0x3e>
 8005af8:	18e1      	adds	r1, r4, r3
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	2030      	movs	r0, #48	@ 0x30
 8005afe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b02:	4422      	add	r2, r4
 8005b04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	e7c7      	b.n	8005aa0 <_printf_common+0x58>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4622      	mov	r2, r4
 8005b14:	4641      	mov	r1, r8
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c8      	blx	r9
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d0e6      	beq.n	8005aec <_printf_common+0xa4>
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7d9      	b.n	8005ad6 <_printf_common+0x8e>
	...

08005b24 <_printf_i>:
 8005b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	7e0f      	ldrb	r7, [r1, #24]
 8005b2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b2c:	2f78      	cmp	r7, #120	@ 0x78
 8005b2e:	4691      	mov	r9, r2
 8005b30:	4680      	mov	r8, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	469a      	mov	sl, r3
 8005b36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b3a:	d807      	bhi.n	8005b4c <_printf_i+0x28>
 8005b3c:	2f62      	cmp	r7, #98	@ 0x62
 8005b3e:	d80a      	bhi.n	8005b56 <_printf_i+0x32>
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	f000 80d2 	beq.w	8005cea <_printf_i+0x1c6>
 8005b46:	2f58      	cmp	r7, #88	@ 0x58
 8005b48:	f000 80b9 	beq.w	8005cbe <_printf_i+0x19a>
 8005b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b54:	e03a      	b.n	8005bcc <_printf_i+0xa8>
 8005b56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b5a:	2b15      	cmp	r3, #21
 8005b5c:	d8f6      	bhi.n	8005b4c <_printf_i+0x28>
 8005b5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b64 <_printf_i+0x40>)
 8005b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b64:	08005bbd 	.word	0x08005bbd
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005b4d 	.word	0x08005b4d
 8005b70:	08005b4d 	.word	0x08005b4d
 8005b74:	08005b4d 	.word	0x08005b4d
 8005b78:	08005b4d 	.word	0x08005b4d
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005b4d 	.word	0x08005b4d
 8005b84:	08005b4d 	.word	0x08005b4d
 8005b88:	08005b4d 	.word	0x08005b4d
 8005b8c:	08005b4d 	.word	0x08005b4d
 8005b90:	08005cd1 	.word	0x08005cd1
 8005b94:	08005bfb 	.word	0x08005bfb
 8005b98:	08005c8b 	.word	0x08005c8b
 8005b9c:	08005b4d 	.word	0x08005b4d
 8005ba0:	08005b4d 	.word	0x08005b4d
 8005ba4:	08005cf3 	.word	0x08005cf3
 8005ba8:	08005b4d 	.word	0x08005b4d
 8005bac:	08005bfb 	.word	0x08005bfb
 8005bb0:	08005b4d 	.word	0x08005b4d
 8005bb4:	08005b4d 	.word	0x08005b4d
 8005bb8:	08005c93 	.word	0x08005c93
 8005bbc:	6833      	ldr	r3, [r6, #0]
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6032      	str	r2, [r6, #0]
 8005bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e09d      	b.n	8005d0c <_printf_i+0x1e8>
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	1d19      	adds	r1, r3, #4
 8005bd6:	6031      	str	r1, [r6, #0]
 8005bd8:	0606      	lsls	r6, r0, #24
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0xbc>
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <_printf_i+0xc4>
 8005be0:	0645      	lsls	r5, r0, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0xb8>
 8005be4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	da03      	bge.n	8005bf4 <_printf_i+0xd0>
 8005bec:	232d      	movs	r3, #45	@ 0x2d
 8005bee:	426d      	negs	r5, r5
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf4:	4859      	ldr	r0, [pc, #356]	@ (8005d5c <_printf_i+0x238>)
 8005bf6:	230a      	movs	r3, #10
 8005bf8:	e011      	b.n	8005c1e <_printf_i+0xfa>
 8005bfa:	6821      	ldr	r1, [r4, #0]
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	0608      	lsls	r0, r1, #24
 8005c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c04:	d402      	bmi.n	8005c0c <_printf_i+0xe8>
 8005c06:	0649      	lsls	r1, r1, #25
 8005c08:	bf48      	it	mi
 8005c0a:	b2ad      	uxthmi	r5, r5
 8005c0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c0e:	4853      	ldr	r0, [pc, #332]	@ (8005d5c <_printf_i+0x238>)
 8005c10:	6033      	str	r3, [r6, #0]
 8005c12:	bf14      	ite	ne
 8005c14:	230a      	movne	r3, #10
 8005c16:	2308      	moveq	r3, #8
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c1e:	6866      	ldr	r6, [r4, #4]
 8005c20:	60a6      	str	r6, [r4, #8]
 8005c22:	2e00      	cmp	r6, #0
 8005c24:	bfa2      	ittt	ge
 8005c26:	6821      	ldrge	r1, [r4, #0]
 8005c28:	f021 0104 	bicge.w	r1, r1, #4
 8005c2c:	6021      	strge	r1, [r4, #0]
 8005c2e:	b90d      	cbnz	r5, 8005c34 <_printf_i+0x110>
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	d04b      	beq.n	8005ccc <_printf_i+0x1a8>
 8005c34:	4616      	mov	r6, r2
 8005c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005c3e:	5dc7      	ldrb	r7, [r0, r7]
 8005c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c44:	462f      	mov	r7, r5
 8005c46:	42bb      	cmp	r3, r7
 8005c48:	460d      	mov	r5, r1
 8005c4a:	d9f4      	bls.n	8005c36 <_printf_i+0x112>
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d10b      	bne.n	8005c68 <_printf_i+0x144>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07df      	lsls	r7, r3, #31
 8005c54:	d508      	bpl.n	8005c68 <_printf_i+0x144>
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	6861      	ldr	r1, [r4, #4]
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	bfde      	ittt	le
 8005c5e:	2330      	movle	r3, #48	@ 0x30
 8005c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c68:	1b92      	subs	r2, r2, r6
 8005c6a:	6122      	str	r2, [r4, #16]
 8005c6c:	f8cd a000 	str.w	sl, [sp]
 8005c70:	464b      	mov	r3, r9
 8005c72:	aa03      	add	r2, sp, #12
 8005c74:	4621      	mov	r1, r4
 8005c76:	4640      	mov	r0, r8
 8005c78:	f7ff fee6 	bl	8005a48 <_printf_common>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d14a      	bne.n	8005d16 <_printf_i+0x1f2>
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	b004      	add	sp, #16
 8005c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	f043 0320 	orr.w	r3, r3, #32
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	4833      	ldr	r0, [pc, #204]	@ (8005d60 <_printf_i+0x23c>)
 8005c94:	2778      	movs	r7, #120	@ 0x78
 8005c96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	6831      	ldr	r1, [r6, #0]
 8005c9e:	061f      	lsls	r7, r3, #24
 8005ca0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca4:	d402      	bmi.n	8005cac <_printf_i+0x188>
 8005ca6:	065f      	lsls	r7, r3, #25
 8005ca8:	bf48      	it	mi
 8005caa:	b2ad      	uxthmi	r5, r5
 8005cac:	6031      	str	r1, [r6, #0]
 8005cae:	07d9      	lsls	r1, r3, #31
 8005cb0:	bf44      	itt	mi
 8005cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb6:	6023      	strmi	r3, [r4, #0]
 8005cb8:	b11d      	cbz	r5, 8005cc2 <_printf_i+0x19e>
 8005cba:	2310      	movs	r3, #16
 8005cbc:	e7ac      	b.n	8005c18 <_printf_i+0xf4>
 8005cbe:	4827      	ldr	r0, [pc, #156]	@ (8005d5c <_printf_i+0x238>)
 8005cc0:	e7e9      	b.n	8005c96 <_printf_i+0x172>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	f023 0320 	bic.w	r3, r3, #32
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	e7f6      	b.n	8005cba <_printf_i+0x196>
 8005ccc:	4616      	mov	r6, r2
 8005cce:	e7bd      	b.n	8005c4c <_printf_i+0x128>
 8005cd0:	6833      	ldr	r3, [r6, #0]
 8005cd2:	6825      	ldr	r5, [r4, #0]
 8005cd4:	6961      	ldr	r1, [r4, #20]
 8005cd6:	1d18      	adds	r0, r3, #4
 8005cd8:	6030      	str	r0, [r6, #0]
 8005cda:	062e      	lsls	r6, r5, #24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0x1c0>
 8005ce0:	6019      	str	r1, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <_printf_i+0x1c6>
 8005ce4:	0668      	lsls	r0, r5, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0x1bc>
 8005ce8:	8019      	strh	r1, [r3, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	4616      	mov	r6, r2
 8005cf0:	e7bc      	b.n	8005c6c <_printf_i+0x148>
 8005cf2:	6833      	ldr	r3, [r6, #0]
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	6032      	str	r2, [r6, #0]
 8005cf8:	681e      	ldr	r6, [r3, #0]
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7fa fa6e 	bl	80001e0 <memchr>
 8005d04:	b108      	cbz	r0, 8005d0a <_printf_i+0x1e6>
 8005d06:	1b80      	subs	r0, r0, r6
 8005d08:	6060      	str	r0, [r4, #4]
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d14:	e7aa      	b.n	8005c6c <_printf_i+0x148>
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	47d0      	blx	sl
 8005d20:	3001      	adds	r0, #1
 8005d22:	d0ad      	beq.n	8005c80 <_printf_i+0x15c>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	079b      	lsls	r3, r3, #30
 8005d28:	d413      	bmi.n	8005d52 <_printf_i+0x22e>
 8005d2a:	68e0      	ldr	r0, [r4, #12]
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	bfb8      	it	lt
 8005d32:	4618      	movlt	r0, r3
 8005d34:	e7a6      	b.n	8005c84 <_printf_i+0x160>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4632      	mov	r2, r6
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	47d0      	blx	sl
 8005d40:	3001      	adds	r0, #1
 8005d42:	d09d      	beq.n	8005c80 <_printf_i+0x15c>
 8005d44:	3501      	adds	r5, #1
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	9903      	ldr	r1, [sp, #12]
 8005d4a:	1a5b      	subs	r3, r3, r1
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dcf2      	bgt.n	8005d36 <_printf_i+0x212>
 8005d50:	e7eb      	b.n	8005d2a <_printf_i+0x206>
 8005d52:	2500      	movs	r5, #0
 8005d54:	f104 0619 	add.w	r6, r4, #25
 8005d58:	e7f5      	b.n	8005d46 <_printf_i+0x222>
 8005d5a:	bf00      	nop
 8005d5c:	08005ed1 	.word	0x08005ed1
 8005d60:	08005ee2 	.word	0x08005ee2

08005d64 <memmove>:
 8005d64:	4288      	cmp	r0, r1
 8005d66:	b510      	push	{r4, lr}
 8005d68:	eb01 0402 	add.w	r4, r1, r2
 8005d6c:	d902      	bls.n	8005d74 <memmove+0x10>
 8005d6e:	4284      	cmp	r4, r0
 8005d70:	4623      	mov	r3, r4
 8005d72:	d807      	bhi.n	8005d84 <memmove+0x20>
 8005d74:	1e43      	subs	r3, r0, #1
 8005d76:	42a1      	cmp	r1, r4
 8005d78:	d008      	beq.n	8005d8c <memmove+0x28>
 8005d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d82:	e7f8      	b.n	8005d76 <memmove+0x12>
 8005d84:	4402      	add	r2, r0
 8005d86:	4601      	mov	r1, r0
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	d100      	bne.n	8005d8e <memmove+0x2a>
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d96:	e7f7      	b.n	8005d88 <memmove+0x24>

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	@ (8005db4 <_sbrk_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb fdbe 	bl	8001924 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200005cc 	.word	0x200005cc

08005db8 <memcpy>:
 8005db8:	440a      	add	r2, r1
 8005dba:	4291      	cmp	r1, r2
 8005dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc0:	d100      	bne.n	8005dc4 <memcpy+0xc>
 8005dc2:	4770      	bx	lr
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dce:	4291      	cmp	r1, r2
 8005dd0:	d1f9      	bne.n	8005dc6 <memcpy+0xe>
 8005dd2:	bd10      	pop	{r4, pc}

08005dd4 <_realloc_r>:
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4615      	mov	r5, r2
 8005ddc:	460c      	mov	r4, r1
 8005dde:	b921      	cbnz	r1, 8005dea <_realloc_r+0x16>
 8005de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de4:	4611      	mov	r1, r2
 8005de6:	f7ff bc4b 	b.w	8005680 <_malloc_r>
 8005dea:	b92a      	cbnz	r2, 8005df8 <_realloc_r+0x24>
 8005dec:	f7ff fbdc 	bl	80055a8 <_free_r>
 8005df0:	2400      	movs	r4, #0
 8005df2:	4620      	mov	r0, r4
 8005df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df8:	f000 f81a 	bl	8005e30 <_malloc_usable_size_r>
 8005dfc:	4285      	cmp	r5, r0
 8005dfe:	4606      	mov	r6, r0
 8005e00:	d802      	bhi.n	8005e08 <_realloc_r+0x34>
 8005e02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e06:	d8f4      	bhi.n	8005df2 <_realloc_r+0x1e>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f7ff fc38 	bl	8005680 <_malloc_r>
 8005e10:	4607      	mov	r7, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0ec      	beq.n	8005df0 <_realloc_r+0x1c>
 8005e16:	42b5      	cmp	r5, r6
 8005e18:	462a      	mov	r2, r5
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	bf28      	it	cs
 8005e1e:	4632      	movcs	r2, r6
 8005e20:	f7ff ffca 	bl	8005db8 <memcpy>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff fbbe 	bl	80055a8 <_free_r>
 8005e2c:	463c      	mov	r4, r7
 8005e2e:	e7e0      	b.n	8005df2 <_realloc_r+0x1e>

08005e30 <_malloc_usable_size_r>:
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	1f18      	subs	r0, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfbc      	itt	lt
 8005e3a:	580b      	ldrlt	r3, [r1, r0]
 8005e3c:	18c0      	addlt	r0, r0, r3
 8005e3e:	4770      	bx	lr

08005e40 <_init>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr

08005e4c <_fini>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr
